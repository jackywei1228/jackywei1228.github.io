{"meta":{"title":"彪彪","subtitle":"嫑嫑","description":"世界上最遥远的距离不是生与死，而是你亲手制造的BUG就在你眼前，你却怎么都找不到她.","author":"彪彪","url":"https://ifonly.me"},"pages":[{"title":"About","date":"2018-12-14T02:56:11.936Z","updated":"2018-12-14T02:56:11.936Z","comments":true,"path":"about/index.html","permalink":"https://ifonly.me/about/index.html","excerpt":"","text":""},{"title":"Categories","date":"2018-12-13T06:08:58.985Z","updated":"2018-12-13T06:08:58.985Z","comments":true,"path":"categories/index.html","permalink":"https://ifonly.me/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-12-13T06:08:58.985Z","updated":"2018-12-13T06:08:58.985Z","comments":true,"path":"tags/index.html","permalink":"https://ifonly.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"简单的游戏网络底层框架设计","slug":"框架设计/简单的游戏网络底层框架设计","date":"2018-12-14T07:10:16.018Z","updated":"2018-12-14T07:10:16.018Z","comments":true,"path":"2018/12/14/kuang-jia-she-ji/jian-dan-de-you-xi-wang-luo-di-ceng-kuang-jia-she-ji/","link":"","permalink":"https://ifonly.me/2018/12/14/kuang-jia-she-ji/jian-dan-de-you-xi-wang-luo-di-ceng-kuang-jia-she-ji/","excerpt":"","text":"sequenceDiagram title: 序列图 participant NetWork Thread participant Message Thread participant AI Thread NetWork Thread->Message Thread: 收到网络信息 Message Thread->Message Thread: Paser处理信息 Message Thread->AI Thread: 解析好的信息","categories":[{"name":"框架设计","slug":"框架设计","permalink":"https://ifonly.me/categories/框架设计/"}],"tags":[]},{"title":"LOG工具设计","slug":"框架设计/001-LOG工具设计","date":"2018-12-14T02:48:37.564Z","updated":"2018-12-14T02:48:37.564Z","comments":true,"path":"2018/12/14/kuang-jia-she-ji/001-log-gong-ju-she-ji/","link":"","permalink":"https://ifonly.me/2018/12/14/kuang-jia-she-ji/001-log-gong-ju-she-ji/","excerpt":"","text":"graph TD; A-->B; A-->C; B-->D; C-->D; gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d","categories":[{"name":"框架设计","slug":"框架设计","permalink":"https://ifonly.me/categories/框架设计/"}],"tags":[]},{"title":"业务逻辑规划","slug":"需求实现/Fota功能的实现/业务逻辑规划","date":"2018-12-14T02:17:43.619Z","updated":"2018-12-14T02:17:43.619Z","comments":true,"path":"2018/12/14/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/ye-wu-luo-ji-gui-hua/","link":"","permalink":"https://ifonly.me/2018/12/14/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/ye-wu-luo-ji-gui-hua/","excerpt":"","text":"基本设计Fota交互序列图 sequenceDiagram title: Fota序列图 participant Device participant Device Manager participant 业务逻辑 participant 数据库 participant 下载服务器 Device->Device Manager: 查询是否需要升级 Device Manager->业务逻辑: 设备ID是否需要升级 业务逻辑-->>数据库: 记录查询动作 业务逻辑->数据库: 查询设备ID & 生成并初始Session ID 数据库->业务逻辑: 返回升级查询结果 & Session ID 业务逻辑->Device Manager: 返回升级查询结果 & Session ID Device Manager->Device: 返回升级查询结果 & Session ID Device->Device Manager: 发起升级请求 & Session ID Device Manager->业务逻辑: 查询升级请求 & Session ID 业务逻辑->数据库: 查询升级请求 & 改Session ID状态为下载 数据库->业务逻辑: 返回升级包信息 业务逻辑->Device Manager: 返回升级包信息 Device Manager->Device: 返回升级包信息 Device-->>下载服务器: 下载差分包 下载服务器-->>Device: 下载完成 Device->Device: check 数据 Device-->>Device Manager: 通知下载完成 & 准备升级 Device Manager-->>业务逻辑: 通知下载完成 & 准备升级 业务逻辑-->>数据库: 记录Session ID状态为下载成功 Device->Device: 执行升级 Device->Device Manager: 通知升级成功 Device Manager->业务逻辑: 通知升级成功 业务逻辑->数据库: 记录升级成功 & 改Session ID 状态为升级成功归档 flow: st=>start: 开始 e1=>end: 结束(配置手机信息) e2=>end: 分区问题 e3=>end: 其他问题 op1=>operation: 检查是否有新版本 op6=>operation: 记录查询动作 cond1=>condition: 有新版本? op2=>operation: 获取新版本信息返回给终端 op3=>operation: 终端发起下载请求 cond3=>condition: 有对应文件? op4=>operation: 返回文件地址 op5=>operation: 返回错误404 cond2=>condition: 能否复现? op7=>operation: 告知服务器准备下载 op8=>operation: 下载 cond4=>condition: 成功? op9=>operation: 告知服务器下载成功 op10=>operation: 告知服务器下载失败 st->op1->op6->cond1->op2->op3->cond3->op4->op7->op8->cond4->op9 cond1(yes)->op2 cond1(no)->e1 cond2(yes)->e2 cond2(no)->e3 cond3(yes)->op4 cond3(no)->op5 cond4(yes)->op9 cond4(no)->op10 sequenceDiagram title: Fota序列图 participant Device participant Device Manager participant 业务逻辑 participant 数据库 participant 下载服务器 Device->Device Manager: 查询是否需要升级 Device Manager->业务逻辑: 设备ID是否需要升级 业务逻辑-->>数据库: 记录查询动作 业务逻辑->数据库: 查询设备ID & Session ID 数据库->业务逻辑: 返回升级查询结果 & Session ID 业务逻辑->Device Manager: 返回升级查询结果 & Session ID Device Manager->Device: 返回升级查询结果 & Session ID Device->Device Manager: 发起升级请求 & Session ID Device Manager->业务逻辑: 查询升级请求 & Session ID 业务逻辑->数据库: 查询升级请求 & Session ID 数据库->业务逻辑: 返回升级包信息 业务逻辑->Device Manager: 返回升级包信息 Device Manager->Device: 返回升级包信息 Device-->>下载服务器: 下载差分包 下载服务器-->>Device: 下载完成 Device->Device: check 数据 Device-->>Device Manager: 通知下载完成 & 准备升级 Device Manager-->>业务逻辑: 通知下载完成 & 准备升级 业务逻辑-->>数据库: 记录状态 Device->Device: 执行升级 Device->Device Manager: 通知升级成功 Device Manager->业务逻辑: 通知升级成功 业务逻辑->数据库: 记录升级成功","categories":[{"name":"需求实现","slug":"需求实现","permalink":"https://ifonly.me/categories/需求实现/"},{"name":"Fota功能的实现","slug":"需求实现/Fota功能的实现","permalink":"https://ifonly.me/categories/需求实现/Fota功能的实现/"}],"tags":[]},{"title":"工作笔记","slug":"工作小贴士/工作笔记","date":"2018-12-14T02:14:28.195Z","updated":"2018-12-14T02:14:28.195Z","comments":true,"path":"2018/12/14/gong-zuo-xiao-tie-shi/gong-zuo-bi-ji/","link":"","permalink":"https://ifonly.me/2018/12/14/gong-zuo-xiao-tie-shi/gong-zuo-bi-ji/","excerpt":"","text":"从ffbm切回android： adb root (如果前面有过这个就不用重新root了） adb shell &quot;echo normal &gt; /dev/block/bootdevice/by-name/misc&quot; adb reboot 等待重新开机即可 MMITEST 暗码*#*#83789#*#* 编译遇到的错误.te 无法查找, 原因是文件名字里面有空格 -____-! 流程图st=>start: 开始 e=>end: 结束 op=>operation: 我的操作 cond=>condition: 确认？ st->op->cond cond(yes)->e cond(no)->op 服务器添加新仓库后，本地使用repo如何同步更新代码cd ~/xxx/.repo/manifestgit fetch origingit rebase -i origin/master (hipad) 调高CPU频率 QCOM Open: adb rootadb shell setenforce 0adb remountadb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu0/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu1/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu2/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu3/online&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor&quot; Check: adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_cur_freq 查看EMMC供应商信息:QS5509QL:/ # cat sys/emmc_info/namemanfid:0xf4:emmc type:Biwin IO Performancefor i in $(seq 1 100);do iotop | head -n 10;donefor i in &#123;1..1000&#125;;do adb shell dumpsys -t 20 cpuinfo | tail -n 1;donecut -d&quot; &quot; -f 1,2,42 /proc/*/stat | sort -n -k +3 sort -n -k 10 /proc/diskstats 372 (irq/77-mbhc 50 ATT mnc,mcc&lt;CDR-SMCD-2100&gt;Definition of an AT&amp;T SIMSummary: SIM cards with one of the following IMSI’s are to be considered an AT&amp;TSIM card:• 310-030• 310 170• 310-280• 310-380310 410• 310 560• 311 180• 310-950 – used for AT&amp;T Lab purposes&lt;CDR-SMCD-2102&gt;Definition of a FirstNet SIMSummary: The SIM cards with one of the following IMSI’s are to be considered asFirstNet SIM cards:• 313-100• 312-670&lt;CKT-SMCD-2100&gt;Definition of a Cricket SIMSummary:The SIM cards the following IMSI’s constitutes as a Cricket SIM card:• 310-150 强制优化为odexadb shell pm force-dex-opt git 设置和取消代理git config --global https.proxy http://127.0.0.1:1080git config --global https.proxy https://127.0.0.1:1080git config --global --unset http.proxygit config --global --unset https.proxy git config --global http.proxy &apos;socks5://127.0.0.1:1080&apos;git config --global https.proxy &apos;socks5://127.0.0.1:1080&apos; npm config delete proxy上一次的Kernel LOGQS5509QL:/sys/fs/pstore # cat console-ramoopsQS5509QL:/ # cat /proc/bootmsg 代码里面获取最顶层的ACTIVITYActivityManager.getService().getTasks(1,0).get(0).topActivity.getClassName() 远程mount black服务器android@NSGWD180021:/data/workspace/QS5509-QL.dint.xml_0423$ sudo mount -t cifs -o username=&quot;android&quot;,password=&quot;mobile#5&quot; //10.1.6.32/android /mnt/10.1.6.32android@NSGWD180021:/data/workspace/QS5509-QL.dint.xml_0423$ cd /mnt/10.1.6.32/ 查看内存压力usage=`adb shell cat /dev/memcg/memory.usage_in_bytes` &amp;&amp; memsw=`adb shell cat /dev/memcg/memory.memsw.usage_in_bytes` &amp;&amp; let resu=$usage*100 &amp;&amp; let res=$resu/$memsw &amp;&amp; echo $res 退出FFBM模式echo &apos;normal&apos; &gt; /dev/block/platform/soc/7824900.sdhci/by-name/misc 函数调用堆栈Slog.w(TAG,android.util.Log.getStackTraceString(new Throwable()));android.util.Log.w(TAG,android.util.Log.getStackTraceString(new Throwable()));android.util.Log.w(&quot;jackywei&quot;,&quot;jackywei log&quot;); 获取binder的pid uid发送广播adb shell am broadcast -a &quot;com.han.enable.collapsed&quot; adb shell ps | grep -i systemui | awk &apos;&#123;print $2&#125;&apos; | xargs adb shell kill -9adb root &amp;&amp; adb remount &amp;&amp; adb push SystemUI.apk /system/priv-app/SystemUI/ Open the MPEWhen trying to open the preview (both with Ctrl+Shift+M and Ctrl+Shift+P &gt; ‘Markdown Preview Enhanced: Open Preview’, the following error message appears. scp命令使用 把本地文件夹上传到服务器上面:scp -r /home/android/fotaNodeRespon/fotaservice android@10.1.152.145:/home/android/weibiao/ 安装virbox的内核切换 GCC 版本到 7.0sudo /usr/bin/gcc_to_7.sh编译vbox driversudo /sbin/vboxconfig切换 GCC 到原来4.8版本sudo /usr/bin/gcc_to_48.sh","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"DatabasesInfo","slug":"需求实现/Fota功能的实现/DatabasesInfo","date":"2018-12-13T07:56:55.813Z","updated":"2018-12-13T07:56:30.358Z","comments":true,"path":"2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/databasesinfo/","link":"","permalink":"https://ifonly.me/2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/databasesinfo/","excerpt":"","text":"CREATE TABLE activation ( id INT UNSIGNED NOT NULL PRIMARY KEY AUTO_INCREMENT, code varchar(20) NOT NULL, puid varchar(20) NOT NULL, current varchar(10) NOT NULL, createTime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP, updateTime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) ENGINE=InnoDB DEFAULT CHARSET=utf8; CREATE UNIQUE INDEX index_code_activation ON activation (code);CREATE INDEX index_puid_activation ON activation (puid); select * from activation;+—-+—————–+—————–+———+———————+———————+| id | code | puid | current | createTime | updateTime |+—-+—————–+—————–+———+———————+———————+| 8 | 111111111111 | QS5509-FOTATEST | v1A73 | 2018-11-30 15:08:24 | 2018-11-30 15:08:24 || 12 | 123456789012345 | QS5509A | v1A74 | 2018-11-30 15:08:24 | 2018-11-30 15:08:24 || 13 | 123456789123456 | QS5509A | v1A73 | 2018-11-30 15:08:24 | 2018-11-30 15:08:24 || 14 | 144444444444449 | QS5509A | v1A73 | 2018-11-30 15:08:24 | 2018-11-30 15:08:24 |+—-+—————–+—————–+———+———————+———————+","categories":[{"name":"需求实现","slug":"需求实现","permalink":"https://ifonly.me/categories/需求实现/"},{"name":"Fota功能的实现","slug":"需求实现/Fota功能的实现","permalink":"https://ifonly.me/categories/需求实现/Fota功能的实现/"}],"tags":[]},{"title":"数据库表的建立","slug":"需求实现/Fota功能的实现/数据库表的建立","date":"2018-12-13T07:56:50.468Z","updated":"2018-12-13T07:55:54.066Z","comments":true,"path":"2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/shu-ju-ku-biao-de-jian-li/","link":"","permalink":"https://ifonly.me/2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/shu-ju-ku-biao-de-jian-li/","excerpt":"","text":"表的创建CREATE DATABASE fota;use fota;","categories":[{"name":"需求实现","slug":"需求实现","permalink":"https://ifonly.me/categories/需求实现/"},{"name":"Fota功能的实现","slug":"需求实现/Fota功能的实现","permalink":"https://ifonly.me/categories/需求实现/Fota功能的实现/"}],"tags":[]},{"title":"备份","slug":"需求实现/Fota功能的实现/备份","date":"2018-12-13T07:56:45.220Z","updated":"2018-12-13T07:55:30.293Z","comments":true,"path":"2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/bei-fen/","link":"","permalink":"https://ifonly.me/2018/12/13/xu-qiu-shi-xian/fota-gong-neng-de-shi-xian/bei-fen/","excerpt":"","text":"st=&gt;start: 开始e1=&gt;end: 其他问题e2=&gt;end: 分区问题e3=&gt;end: 其他问题op1=&gt;operation: 恢复出厂设置cond1=&gt;condition: 可以开机？op2=&gt;operation: 写入大量数据cond2=&gt;condition: 能否复现?st-&gt;op1-&gt;cond1-&gt;op2-&gt;cond2cond1(yes)-&gt;op2cond1(no)-&gt;e1cond2(yes)-&gt;e2cond2(no)-&gt;e3 title: 序列图(示例)participant Aparticipant Bparticipant Cnote left of A: A左侧说明note over B: 覆盖B的说明note right of C: C右侧说明A-&gt;A:自己到自己A-&gt;B:实线实箭头A--&gt;C:虚线实箭头B-&gt;&gt;C:实线虚箭头B--&gt;&gt;A:虚线虚箭头 title: Fota序列图participant Deviceparticipant Device Managerparticipant 业务逻辑participant 数据库note left of Device: 手机端note over Device Manager: Web服务端note right of C: C右侧说明Device-&gt;Device:自己到自己Device-&gt;Device Manager:实线实箭头Device--&gt;C:虚线实箭头Device Manager-&gt;&gt;C:实线虚箭头Device Manager--&gt;&gt;Device:虚线虚箭头","categories":[{"name":"需求实现","slug":"需求实现","permalink":"https://ifonly.me/categories/需求实现/"},{"name":"Fota功能的实现","slug":"需求实现/Fota功能的实现","permalink":"https://ifonly.me/categories/需求实现/Fota功能的实现/"}],"tags":[]},{"title":"Whatsapp 来电启动慢的问题","slug":"BUG解析/Whatsapp来电启动慢的问题","date":"2018-12-13T07:54:25.221Z","updated":"2018-12-13T07:41:48.964Z","comments":true,"path":"2018/12/13/bug-jie-xi/whatsapp-lai-dian-qi-dong-man-de-wen-ti/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/whatsapp-lai-dian-qi-dong-man-de-wen-ti/","excerpt":"","text":"现象描述 手机按POWER_OFF之后,被Whatsapp呼入,唤醒手机的时间长达10-40秒,目前有疑问: android@NSGWD180021:/data/workspace/temp/0329/whatsapp_wechat_log_videos/hipadLogs/logs/adb$ grep -ri &apos;Displayed com.whatsapp\\|setPowerMode\\|Set power mode=\\|setTransactionState timed out waiting for previous animation frame&apos; main_log_20180329_100741.log03-29 10:06:35.996 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:06:35.997 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:06:36.388 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:07:08.331 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:07:08.331 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:07:08.660 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:07:42.621 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:07:42.622 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:07:43.008 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:07:43.013 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 392ms03-29 10:07:49.282 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:07:49.282 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:07:49.487 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:07:49.494 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 211ms03-29 10:07:49.711 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:07:49.713 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:07:50.088 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:07:50.088 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 377ms03-29 10:07:50.256 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s390ms (total +1s400ms)03-29 10:07:50.308 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:07:50.308 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:07:50.656 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:07:50.657 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 349ms03-29 10:07:56.754 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:07:56.760 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:07:57.144 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:07:57.144 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 393ms03-29 10:08:01.174 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:08:01.174 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:08:01.373 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:08:01.374 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 199ms03-29 10:08:01.400 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:08:01.483 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:08:01.848 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:08:01.849 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 448ms03-29 10:08:02.151 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s286ms (total +1s297ms)03-29 10:08:02.200 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:08:02.200 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:08:02.548 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:08:02.554 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 353ms03-29 10:08:08.811 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:08:08.820 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:08:09.202 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:08:09.206 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 395ms03-29 10:08:12.920 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:08:12.920 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:08:13.120 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:08:13.122 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 203ms03-29 10:08:13.283 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:08:13.286 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:08:13.668 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:08:13.668 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 385ms03-29 10:08:13.719 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s112ms (total +1s125ms)03-29 10:08:13.800 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:08:13.800 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:08:14.229 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:08:14.231 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 431ms03-29 10:08:33.799 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:08:33.807 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:08:34.219 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:08:34.220 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 428ms03-29 10:09:30.210 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:09:30.210 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:09:30.420 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:09:30.423 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 213ms03-29 10:09:31.580 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:09:31.583 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:09:32.004 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:09:32.006 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 425ms03-29 10:09:32.051 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s687ms (total +1s707ms)03-29 10:09:32.133 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:09:32.133 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:09:32.528 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:09:32.529 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 396ms03-29 10:09:39.985 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:09:39.985 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:09:40.407 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:09:40.408 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 423ms03-29 10:09:46.933 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:09:46.933 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:09:47.138 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:09:47.141 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 210ms03-29 10:09:47.253 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:09:47.257 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:09:47.623 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:09:47.624 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 384ms03-29 10:09:48.046 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s495ms (total +1s507ms)03-29 10:09:48.113 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:09:48.113 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:09:48.482 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:09:48.491 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 378ms03-29 10:09:58.077 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:09:58.084 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:09:58.463 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:09:58.463 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 387ms03-29 10:10:04.380 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +700ms (total +713ms)03-29 10:10:04.445 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:10:04.445 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:10:04.786 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:10:04.786 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 342ms03-29 10:11:32.899 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:11:32.909 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:11:33.286 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:11:33.290 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 391ms03-29 10:11:46.826 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:11:46.826 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:11:47.024 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:11:47.025 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 199ms03-29 10:11:47.140 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:11:47.141 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:11:47.508 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:11:47.509 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 418ms03-29 10:11:47.841 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s353ms (total +1s365ms)03-29 10:11:47.912 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:11:47.912 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:11:48.243 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:11:48.243 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 332ms03-29 10:11:54.559 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:11:54.561 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:11:54.944 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:11:54.947 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 393ms03-29 10:12:00.247 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:12:00.248 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:12:00.447 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:12:00.448 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 201ms03-29 10:12:00.604 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:00.607 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:00.989 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:00.989 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 389ms03-29 10:12:01.057 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s110ms (total +1s123ms)03-29 10:12:01.120 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:12:01.120 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:12:01.459 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:12:01.461 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 342ms03-29 10:12:07.794 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:07.799 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:08.182 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:08.183 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 389ms03-29 10:12:11.794 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:12:11.794 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:12:11.995 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:12:11.996 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 202ms03-29 10:12:12.120 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:12.121 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:12.497 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:12.498 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 434ms03-29 10:12:12.578 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s79ms (total +1s91ms)03-29 10:12:12.650 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:12:12.650 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:12:12.991 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:12:12.992 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 342ms03-29 10:12:19.242 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:19.242 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:19.625 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:19.627 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 392ms03-29 10:12:23.276 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +651ms (total +661ms)03-29 10:12:23.354 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:12:23.354 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:12:23.710 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:12:23.710 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 356ms03-29 10:12:31.077 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:31.086 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:31.493 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:31.498 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 422ms03-29 10:12:35.282 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:12:35.282 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:12:35.480 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:12:35.482 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 200ms03-29 10:12:35.628 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:12:35.637 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:12:36.014 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:12:36.014 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 386ms03-29 10:12:36.081 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +1s119ms (total +1s135ms)03-29 10:12:36.168 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:12:36.168 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:12:36.495 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:12:36.497 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 329ms03-29 10:13:13.554 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:13:13.569 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:13:13.947 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:13:13.952 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 399ms03-29 10:13:29.979 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:13:29.979 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:13:30.179 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:13:30.187 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 207ms03-29 10:13:30.312 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:13:30.315 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:13:35.332 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:13:39.744 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:13:39.746 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9437ms03-29 10:13:39.882 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s199ms (total +45s962ms)03-29 10:13:39.962 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:13:39.962 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:13:40.284 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:13:40.285 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 323ms03-29 10:13:47.661 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:13:47.662 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:13:48.075 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:13:48.079 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 430ms03-29 10:14:02.664 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:14:02.664 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:14:02.870 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:14:02.871 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 207ms03-29 10:14:03.055 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:14:03.056 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:14:08.221 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:14:12.477 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:14:12.478 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9423ms03-29 10:14:12.571 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s214ms (total +10s221ms)03-29 10:14:12.630 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:14:12.630 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:14:12.960 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:14:12.961 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 330ms03-29 10:14:27.596 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:14:27.610 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:14:28.000 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:14:28.000 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 404ms03-29 10:14:32.253 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:14:32.253 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:14:32.451 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:14:32.457 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 204ms03-29 10:14:32.577 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:14:32.577 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:14:37.500 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:14:41.984 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:14:41.987 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9463ms03-29 10:14:42.113 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s248ms (total +10s272ms)03-29 10:14:42.166 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:14:42.166 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:14:42.509 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:14:42.511 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 345ms03-29 10:14:49.404 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:14:49.413 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:14:49.788 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:14:49.791 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 387ms03-29 10:14:53.201 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:14:53.201 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:14:53.403 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:14:53.406 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 205ms03-29 10:14:53.517 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:14:53.517 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:14:58.453 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:15:03.002 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:15:03.019 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9544ms03-29 10:15:03.109 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s211ms (total +10s222ms)03-29 10:15:03.182 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:15:03.182 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:15:03.525 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:15:03.526 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 344ms03-29 10:15:12.194 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:15:12.195 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:15:12.586 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:15:12.591 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 397ms03-29 10:15:25.813 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:15:25.813 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:15:26.015 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:15:26.017 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 203ms03-29 10:15:26.137 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:15:26.141 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:15:31.126 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:15:35.554 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:15:35.555 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9458ms03-29 10:15:35.634 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s121ms (total +10s135ms)03-29 10:15:35.734 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:15:35.734 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:15:36.073 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:15:36.073 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 343ms03-29 10:15:44.412 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:15:44.416 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:15:44.797 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:15:44.800 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 402ms03-29 10:15:59.235 D/SurfaceFlinger( 307): Set power mode=1, type=0 flinger=0xacaa800003-29 10:15:59.235 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 1 on display: 003-29 10:15:59.435 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 1 on display 003-29 10:15:59.436 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 201ms03-29 10:15:59.557 D/SurfaceFlinger( 307): Set power mode=0, type=0 flinger=0xacaa800003-29 10:15:59.557 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 0 on display: 003-29 10:16:04.485 W/SurfaceFlinger( 307): setTransactionState timed out waiting for previous animation frame03-29 10:16:08.985 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 0 on display 003-29 10:16:08.987 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 9478ms03-29 10:16:09.346 I/ActivityManager( 2374): Displayed com.whatsapp/.voipcalling.VoipActivityV2: +10s422ms (total +10s429ms)03-29 10:16:09.403 D/SurfaceFlinger( 307): Set power mode=2, type=0 flinger=0xacaa800003-29 10:16:09.403 D/qdhwcomposer( 307): hwc_setPowerMode: Setting mode 2 on display: 003-29 10:16:09.770 D/qdhwcomposer( 307): hwc_setPowerMode: Done setting mode 2 on display 003-29 10:16:09.772 D/SurfaceControl( 2374): Excessive delay in setPowerMode(): 369ms","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"手机反应速度变慢","slug":"BUG解析/手机反应极速变慢","date":"2018-12-13T07:54:16.437Z","updated":"2018-12-13T07:50:30.490Z","comments":true,"path":"2018/12/13/bug-jie-xi/shou-ji-fan-ying-ji-su-bian-man/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/shou-ji-fan-ying-ji-su-bian-man/","excerpt":"","text":"初步分析 首先怀疑是CPU暂用率过高导致的 adb shell dumpsys cpuinfo 感觉不像是CPU过高导致的,感觉像是IO 其次怀疑是IO导致的 所以用iotop来看,一些问题. 查看PID,明显是百度地图: 但是,目前没有查询到 到底是哪个线程读写哪个设备???待查…. systrace 查看问题 目前来看感觉像是一个死循环 APP层的Trace 源头 Choreographer#doFrame 代码在Choreographer.java里面,所以,先假设是View控件出现了问题,可以用git 来查看相关文件的修改. gitk core/java/android/view/ 发现一个问题 关键字: ThreadedRender.java 这个比较敏感. 而且,函数里面有返回一个false. 猜测可能是返回false导致的一个死循环. 其中关键字:persist.sys.force_sw_gles 查找这个关键字,相关的地方,并且做一个开关控制. 后面待续… top 分析kswap 和 mmcqd 占比过高 91 root 20 0 0 0 0 S 30.0 0.0 6:58.13 [kswapd0] 232 root 20 0 0 0 0 S 16.6 0.0 4:24.71 [mmcqd/0]","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"Diag 口慢的问题","slug":"BUG解析/diag口慢的问题","date":"2018-12-13T07:54:10.869Z","updated":"2018-12-13T07:50:58.582Z","comments":true,"path":"2018/12/13/bug-jie-xi/diag-kou-man-de-wen-ti/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/diag-kou-man-de-wen-ti/","excerpt":"","text":"Diag 口慢的问题1. 去除earlyprintkandroidboot.bootdevice=7824900.sdhci lpm_levels.sleep_disabled=1 earlyprintkBOARD_KERNEL_CMDLINE := g_android.luns=1 g_android.removable=1 g_android.cdrom=1 console=ttyHSL0,115200,n8 androidboot.console=ttyHSL0 androidboot.hardware=qcom msm_rtb.filter=0x237 ehci-hcd.park=3 androidboot.bootdevice=7824900.sdhci lpm_levels.sleep_disabled=1 earlyprintk` 2. 重新设置KERNEL_DEFCONFIGKERNEL_DEFCONFIG := msm8909_defconfig 主要是串口LOG没有关:CONFIG_SERIAL_MSM_HS=yCONFIG_SERIAL_MSM_HSL=yCONFIG_SERIAL_MSM_HSL_CONSOLE=y 3. LK启动异常adb shell cat /proc/morelog信息显示LK比对比样机要慢 2 秒左右. 4. 屏蔽了写Property的LOG.// Don&apos;t write properties to disk until after we have read all default// properties to prevent them from being overwritten by default values.//LOG(ERROR) &lt;&lt; &quot;write_persistent_property: &quot; &lt;&lt; name &lt;&lt; &quot;,value : &quot; &lt;&lt; value;//modify by weibiao@hipad.com PR165777if (persistent_properties_loaded &amp;&amp; (android::base::StartsWith(name, &quot;persist.&quot;) || android::base::StartsWith(name, &quot;ro.com.google.clientidbase&quot;))) &#123; write_persistent_property(name.c_str(), value.c_str());&#125;","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"闪屏分析","slug":"BUG解析/闪屏分析","date":"2018-12-13T07:54:06.189Z","updated":"2018-12-13T07:53:12.405Z","comments":true,"path":"2018/12/13/bug-jie-xi/shan-ping-fen-xi/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/shan-ping-fen-xi/","excerpt":"","text":"闪屏和不闪屏的区别闪屏有两个 animation 而不闪屏的只有一个(设置同时设置lock screen和home screen的background image) 不闪屏的:01-02 02:39:03.159 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.173 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,247.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.229 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,484.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.242 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,577.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.254 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,669.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.268 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,771.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.285 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,879.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:39:03.302 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.phone/com.android.phone.EmergencyDialerandroid@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ android@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ android@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ android@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ android@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ 闪屏的:android@NSGWD180021:/data/workspace/issueAnalysis/systemui/0614$ grep -i &apos;SURFACE POS&apos; main003_bad.log 01-02 02:16:53.380 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.systemui.ImageWallpaper01-02 02:16:53.388 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:16:53.400 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,322.0): com.android.systemui.ImageWallpaper01-02 02:16:53.408 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,322.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:16:53.470 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,616.0): com.android.systemui.ImageWallpaper01-02 02:16:53.475 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,616.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:16:53.539 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,777.0): com.android.systemui.ImageWallpaper01-02 02:16:53.543 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,777.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:16:53.617 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.systemui.ImageWallpaper01-02 02:16:53.622 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.phone/com.android.phone.EmergencyDialer01-02 02:16:53.727 752 3074 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,0.0): com.android.systemui.ImageWallpaper 这里调用动画01-02 03:41:37.199 745 3054 W jackywei: at com.android.server.wm.WindowContainer.forAllWindows(WindowContainer.java:633)01-02 03:41:37.199 745 3054 W jackywei: at com.android.server.wm.DisplayContent.prepareWindowSurfaces(DisplayContent.java:2637)01-02 03:41:37.199 745 3054 W jackywei: at com.android.server.wm.WindowAnimator.animate(WindowAnimator.java:208) 差异LOG: 闪屏的 SURFACE POS 被执行了两次01-02 08:12:43.067 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.068 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.systemui.ImageWallpaper01-02 08:12:43.070 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.074 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.075 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:12:43.078 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 825555701-02 08:12:43.087 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.128 932 3088 W jackywei: mCurrentTime = 177639,hashCode = 21051177901-02 08:12:43.131 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.132 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,369.0): com.android.systemui.ImageWallpaper01-02 08:12:43.135 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.137 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.139 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,369.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:12:43.141 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 825555701-02 08:12:43.145 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.164 932 3088 W jackywei: mCurrentTime = 177689,hashCode = 21051177901-02 08:12:43.167 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.167 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,633.0): com.android.systemui.ImageWallpaper01-02 08:12:43.169 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.171 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.173 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,633.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:12:43.175 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 825555701-02 08:12:43.179 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.328 932 3088 W jackywei: mCurrentTime = 177722,hashCode = 21051177901-02 08:12:43.332 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.332 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,834.0): com.android.systemui.ImageWallpaper01-02 08:12:43.334 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.336 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.337 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,834.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:12:43.340 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 825555701-02 08:12:43.345 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.360 932 3088 W jackywei: mCurrentTime = 177889,hashCode = 21051177901-02 08:12:43.364 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.365 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.systemui.ImageWallpaper01-02 08:12:43.367 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.371 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.372 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:12:43.374 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 825555701-02 08:12:43.379 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.412 932 3088 W jackywei: mCurrentTime = 177922,hashCode = 21051177901-02 08:12:43.415 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.420 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;9291c89 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 15368922501-02 08:12:43.427 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.476 932 3088 W jackywei: mCurrentTime = 177972,hashCode = 21051177901-02 08:12:43.521 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,0.0): com.android.systemui.ImageWallpaper01-02 08:12:43.524 932 3088 W jackywei: this = Surface(name=com.android.systemui.ImageWallpaper),mSurfaceControl = Surface(name=com.android.systemui.ImageWallpaper),hashCode = 12971757101-02 08:12:43.539 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.545 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.560 932 3088 W jackywei: mCurrentTime = 178089,hashCode = 21051177901-02 08:12:43.563 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.570 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:12:43.631 932 3088 W jackywei: mCurrentTime = 178172,hashCode = 21051177901-02 08:12:43.634 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:12:43.641 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 109886701 差异LOG: 闪屏的 SURFACE POS只执行了一次01-02 08:11:36.840 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:11:36.843 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 2996184501-02 08:11:36.847 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:11:36.852 932 3088 W jackywei: mCurrentTime = 111399,hashCode = 21051177901-02 08:11:36.855 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:11:36.857 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;5886ab2 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 9282629001-02 08:11:36.858 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,403.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:11:36.861 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 2996184501-02 08:11:36.866 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:11:36.935 932 3088 W jackywei: mCurrentTime = 111432,hashCode = 21051177901-02 08:11:36.938 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:11:36.940 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;5886ab2 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 9282629001-02 08:11:36.941 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,577.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:11:36.943 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 2996184501-02 08:11:36.946 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;68cbced StatusBar&#125;, recoveringMemory = true,hashCode = 10988670101-02 08:11:36.956 932 3088 W jackywei: mCurrentTime = 111499,hashCode = 21051177901-02 08:11:36.959 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;8cb7a54 com.android.systemui.ImageWallpaper&#125;, recoveringMemory = true,hashCode = 14755285201-02 08:11:36.960 932 3088 W jackywei: setSurfaceBoundariesLocked this = WindowStateAnimator&#123;5886ab2 com.android.phone/com.android.phone.EmergencyDialer&#125;, recoveringMemory = true,hashCode = 9282629001-02 08:11:36.961 932 3088 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.phone/com.android.phone.EmergencyDialer01-02 08:11:36.963 932 3088 W jackywei: this = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),mSurfaceControl = Surface(name=com.android.phone/com.android.phone.EmergencyDialer),hashCode = 29961845 这一段很重要:01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.WindowState.forAllWindows(WindowState.java:4035)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.WindowContainer.forAllWindows(WindowContainer.java:623)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.WindowContainer.forAllWindows(WindowContainer.java:623)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.DisplayContent.forAllWindows(DisplayContent.java:1546)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.WindowContainer.forAllWindows(WindowContainer.java:636)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.DisplayContent.prepareWindowSurfaces(DisplayContent.java:2637)01-02 09:08:37.871 924 3080 W jackywei: at com.android.server.wm.WindowAnimator.animate(WindowAnimator.java:208) 不闪屏时:mTmpSize.set : w.mShownPosition.x = 0,w.mShownPosition.y = 9 这里的这个Y的值是不会变的mShownPosition.y 一直都是0 WP target app xform: 这个LOG和上面的mShownPosition 有关系 if (wpAppAnimator != null &amp;&amp; wpAppAnimator.hasTransformation &amp;&amp; wpAppAnimator.animation != null &amp;&amp; !wpAppAnimator.animation.getDetachWallpaper()) &#123;appTransformation = wpAppAnimator.transformation;//jackyweiif (DEBUG_WALLPAPER &amp;&amp; appTransformation != null) &#123; Slog.v(TAG, &quot;WP target app xform: &quot; + appTransformation);&#125; else &#123; android.util.Log.w(&quot;jackywei&quot;,&quot;this = &quot;+this.hashCode()+&quot;,WP target app xform: = null&quot;);&#125; WP target app xform 和这个wpAppAnimator变量有关系 可以Fix的代码void computeShownFrameLocked() &#123; final boolean selfTransformation = mHasLocalTransformation; Transformation attachedTransformation = (mParentWinAnimator != null &amp;&amp; mParentWinAnimator.mHasLocalTransformation) ? mParentWinAnimator.mTransformation : null; Transformation appTransformation = (mAppAnimator != null &amp;&amp; mAppAnimator.hasTransformation) ? mAppAnimator.transformation : null; appTransformation = null; //jackywei is can fix the bug.这个代码可以解BUG,但是,不知道会引起其他什么问题. // Wallpapers are animated based on the &quot;real&quot; window they // are currently targeting. final WindowState wallpaperTarget = mWallpaperControllerLocked.getWallpaperTarget(); android.util.Log.w(&quot;jackywei&quot;,&quot;this = &quot;+this.hashCode()+&quot;,wallpaperTarget= &quot;+wallpaperTarget+&quot;,mIsWallpaper = &quot;+mIsWallpaper); android.util.Log.w(&quot;jackywei&quot;,&quot;this = &quot;+this.hashCode()+&quot;,mService.mAnimateWallpaperWithTarget= &quot;+mService.mAnimateWallpaperWithTarget); wpAppAnimator.hasTransformation = false;//jackywei is can fix the bug.we must check where is the hasTransformation value from.这个代码可以解BUG,但是,不知道会引起其他什么问题. if (wpAppAnimator != null &amp;&amp; wpAppAnimator.hasTransformation &amp;&amp; wpAppAnimator.animation != null &amp;&amp; !wpAppAnimator.animation.getDetachWallpaper()) &#123; appTransformation = wpAppAnimator.transformation;//jackywei if (DEBUG_WALLPAPER &amp;&amp; appTransformation != null) &#123; Slog.v(TAG, &quot;WP target app xform: &quot; + appTransformation); &#125; else &#123; android.util.Log.w(&quot;jackywei&quot;,&quot;this = &quot;+this.hashCode()+&quot;,WP target app xform: = null&quot;); &#125; &#125; &#125;","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"长时间使用之后手机变慢","slug":"BUG解析/长时间使用之后手机反应变慢","date":"2018-12-13T07:54:01.173Z","updated":"2018-12-13T07:52:00.017Z","comments":true,"path":"2018/12/13/bug-jie-xi/chang-shi-jian-shi-yong-zhi-hou-shou-ji-fan-ying-bian-man/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/chang-shi-jian-shi-yong-zhi-hou-shou-ji-fan-ying-bian-man/","excerpt":"","text":"长时间使用之后手机变慢现象描述:长时间使用之后手机变慢 抓取java traceview如下显示: traceview显示是:WindowsContianer.forAllWindows()占了大量CPU时间. 怀疑是anmimation相关的对象没有释放 用MAT抓取 hprof有900个WindowStateAnimator对象 Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowStateAnimator| 900 | 201,600 | &gt;= 490,432被mTokenMap 引用780次 Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained HeapmTokenMap java.util.HashMap @ 0x1340b950| 780 | 40 | 174,720 | 30,080代码:mTokenMap? 没有释放? // Mapping from a token IBinder to a WindowToken object on this display.private final HashMap&lt;IBinder, WindowToken&gt; mTokenMap = new HashMap(); private void addWindowToken(IBinder binder, WindowToken token) { xxxxx xxxxx if (token == null) { throw new IllegalArgumentException(&quot;Can&apos;t map null token to display=&quot; + getName() + &quot; binder=&quot; + binder); } mTokenMap.put(binder, token); xxxx xxxx } WindowToken removeWindowToken(IBinder binder) { final WindowToken token = mTokenMap.remove(binder); if (token != null &amp;&amp; token.asAppWindowToken() == null) { token.setExiting(); } return token; } /** Changes the display the input window token is housed on to this one. */ void reParentWindowToken(WindowToken token) { final DisplayContent prevDc = token.getDisplayContent(); if (prevDc == this) { return; } if (prevDc != null &amp;&amp; prevDc.mTokenMap.remove(token.token) != null &amp;&amp; token.asAppWindowToken() == null) { // Removed the token from the map, but made sure it&apos;s not an app token before removing // from parent. token.getParent().removeChild(token); } addWindowToken(token.token, token); } void removeAppToken(IBinder binder) { final WindowToken token = removeWindowToken(binder); if (token == null) { Slog.w(TAG_WM, &quot;removeAppToken: Attempted to remove non-existing token: &quot; + binder); return; } final AppWindowToken appToken = token.asAppWindowToken(); if (appToken == null) { Slog.w(TAG_WM, &quot;Attempted to remove non-App token: &quot; + binder + &quot; token=&quot; + token); return; } appToken.onRemovedFromDisplay(); } 调用:removeWindowToken的地方:./DisplayContent.java: removeAppToken(IBinder binder) {./DisplayContent.java:855: final WindowToken token = removeWindowToken(binder); ./WindowManagerService.java: public void removeWindowToken(IBinder binder, int displayId) {./WindowManagerService.java:2496: final WindowToken token = dc.removeWindowToken(binder);./WindowManagerService.java:7530: public void removeWindowToken(IBinder binder, boolean removeWindows, int displayId) {./WindowManagerService.java:7540: final WindowToken token = dc.removeWindowToken(binder);./WindowManagerService.java:7549: WindowManagerService.this.removeWindowToken(binder, displayId); ./WindowToken.java:239: mDisplayContent.removeWindowToken(token); 调用:removeAppToken 的地方:./AppWindowContainerController.java:246: dc.removeAppToken(mToken.asBinder()); 从上述查看:WindowToken 对象和AppWindowContainerController对象 Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.AppWindowToken| 905 | 181,000 | &gt;= 1,169,272Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.AppWindowContainerController| 904 | 43,392 | &gt;= 116,032都是没有释放的. 分析WindowStateAnimator 的释放过程,找出不释放的原因加上LOG: WindowToken removeWindowToken(IBinder binder) { android.util.Log.w(&quot;jackywei&quot;,&quot;removeWindowToken&quot;); android.util.Log.w(&quot;jackywei&quot;,android.util.Log.getStackTraceString(new Throwable())); android.util.Log.w(&quot;jackywei&quot;,&quot;++++++++++++++++++++removeWindowToken++++++++++++++++++++&quot;); final WindowToken token = mTokenMap.remove(binder); if (token != null &amp;&amp; token.asAppWindowToken() == null) { token.setExiting(); } return token; } 应用died的时候会主动释放: 01-02 12:44:01.223 746 1581 W jackywei: removeWindowToken01-02 12:44:01.225 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:858)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.225 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.226 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++01-02 12:44:01.227 746 1581 W jackywei: removeWindowToken01-02 12:44:01.228 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.WindowToken.removeImmediately(WindowToken.java:239)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeImmediately(AppWindowToken.java:528)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeIfPossible(AppWindowToken.java:535)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.onRemovedFromDisplay(AppWindowToken.java:601)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:871)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.228 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.228 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++ 如果应用没有退出,会一直有? Class Name | Shallow Heap | Retained Heapcom.android.server.wm.WindowState$DeathRecipient @ 0x133e3d40 Native Stack| 16 | 16Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 900 | 396,000 | &gt;= 2,334,112com.android.server.wm.WindowStateAnimator | 900 | 201,600 | &gt;= 490,432com.android.server.wm.WindowState$WindowId | 900 | 28,800 | &gt;= 50,800 com.android.server.wm.WindowState$DeathRecipient| 900 | 14,400 | &gt;= 14,632下面某个应用: 129,325K: Persistent 71,069K: com.android.systemui (pid 3694 / activities) 23,604K: com.android.phone (pid 3862) 10,641K: com.han.dmfota (pid 952) 9,753K: com.qualcomm.qti.telephonyservice (pid 3853) 6,689K: com.qualcomm.telephony (pid 970) 3,948K: .dataservices (pid 3821) 3,621K: com.han.tetherEntitlement (pid 947) 17,922K: Persistent Service 17,922K: com.android.bluetooth (pid 3483 / activities) 43,253K: Foreground 26,516K: com.android.launcher3 (pid 785 / activities) 10,029K: com.android.chrome (pid 2044 / activities) 3,663K: com.google.process.gservices (pid 1992) 3,045K: com.android.partnerbrowsercustomizations (pid 2264) 81,973K: Visible 63,027K: com.google.android.gms.persistent (pid 3046) 12,505K: com.android.printspooler (pid 2361) 3,243K: com.android.chrome:sandboxed_process0 (pid 2292) 3,198K: com.qualcomm.qcrilmsgtunnel (pid 574) 115,042K: Perceptible 76,266K: com.android.mms (pid 3376 / activities) 38,776K: com.google.android.inputmethod.latin (pid 2321) 4,831K: A Services 4,831K: com.facebook.lite:fbns (pid 402) 18,116K: Previous 12,914K: com.android.dialer (pid 775 / activities) 5,202K: android.process.acore (pid 3926) 7,047K: B Services 2,947K: com.android.batterywarning (pid 2601) 2,098K: com.qualcomm.simcontacts (pid 4018) 2,002K: com.qti.diagrestoreservice (pid 3986) 153,398K: Cached 22,953K: com.google.android.apps.photos (pid 1307 / activities) 18,624K: com.android.settings (pid 2041 / activities) 16,262K: com.google.android.gms (pid 971) 15,582K: com.android.vending (pid 1183) 13,022K: com.google.android.gms:snet (pid 1781) 10,308K: com.android.vending:instant_app_installer (pid 2183) 9,190K: com.google.android.gms.unstable (pid 2130) 9,068K: com.google.android.apps.speechservices:search (pid 570) 8,063K: com.google.android.apps.searchlite (pid 3329) 7,290K: com.google.android.calendar (pid 2969) 5,409K: com.facebook.appmanager (pid 1112) 4,426K: com.facebook.lite (pid 1195) 3,074K: android.process.media (pid 321) 2,966K: com.android.providers.calendar (pid 3012) 2,783K: com.google.process.gapps (pid 699) 2,356K: com.google.android.partnersetup (pid 3835) 2,022K: com.han.feedback (pid 2461) 由于都是window产生的问题,先download window adb shell dumpsys window &gt; window.log 确实有很多对象: WINDOW MANAGER ANIMATOR STATE (dumpsys window animator) DisplayContentsAnimator #0: Window #0: WindowStateAnimator{970b521 com.android.systemui.ImageWallpaper} Window #1: WindowStateAnimator{4b35d46 com.android.systemui/com.android.systemui.recents.RecentsActivity} Window #2: WindowStateAnimator{9ace6a5 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #3: WindowStateAnimator{8a51c9c PopupWindow:8bce4ca} Window #4: WindowStateAnimator{fa27f6a com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #5: WindowStateAnimator{9d57434 com.android.bluetooth/com.android.bluetooth.opp.BluetoothOppTransferActivity} Window #6: WindowStateAnimator{d82825d com.android.bluetooth/com.android.bluetooth.opp.BluetoothOppTransferHistory} Window #7: WindowStateAnimator{53807d2 com.android.launcher3/com.android.launcher3.SettingsActivity} Window #8: WindowStateAnimator{9a980a3 com.android.chrome/org.chromium.chrome.browser.webapps.WebApkActivity} Window #9: WindowStateAnimator{b9b240f com.android.mms/com.android.mms.ui.ConversationList} Window #10: WindowStateAnimator{b9da56e com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #11: WindowStateAnimator{903e4e9 com.android.mms/com.android.mms.ui.ConversationList} Window #12: WindowStateAnimator{883d970 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #13: WindowStateAnimator{3063fb3 com.android.mms/com.android.mms.ui.ConversationList} Window #14: WindowStateAnimator{cc31922 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #15: WindowStateAnimator{314c6ed com.android.mms/com.android.mms.ui.ConversationList} Window #16: WindowStateAnimator{d8ab104 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #17: WindowStateAnimator{8922917 com.android.mms/com.android.mms.ui.ConversationList} Window #18: WindowStateAnimator{d78f996 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #19: WindowStateAnimator{bb4d0b1 com.android.mms/com.android.mms.ui.ConversationList} Window #20: WindowStateAnimator{4497758 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #21: WindowStateAnimator{c99843b com.android.mms/com.android.mms.ui.ConversationList} Window #22: WindowStateAnimator{a0dfaca com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #23: WindowStateAnimator{12d0635 com.android.mms/com.android.mms.ui.ConversationList} Window #24: WindowStateAnimator{a3ac06c com.android.mms/com.android.mms.ui.MessagingPreferenceActivity} Window #25: WindowStateAnimator{a54b51f com.android.mms/com.android.mms.ui.ConversationList} Window #26: WindowStateAnimator{78d90be com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #27: WindowStateAnimator{87e2b79 com.android.mms/com.android.mms.ui.ConversationList} Window #28: WindowStateAnimator{97e040 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #29: WindowStateAnimator{17ddfc3 com.android.mms/com.android.mms.ui.ConversationList} Window #30: WindowStateAnimator{d73ef72 com.android.mms/com.android.mms.ui.ComposeMessageActivity} Window #31: WindowStateAnimator{d64c47d com.android.mms/com.android.mms.ui.ConversationList} Window #32: WindowStateAnimator{9ecead4 com.android.mms/com.android.mms.ui.SearchConversationActivity} Window #33: WindowStateAnimator{db4e827 com.android.mms/com.android.mms.ui.ConversationList} Window #34: WindowStateAnimator{c220ae6 com.android.mms/com.android.mms.ui.ComposeMessageActivity} activity 没有释放? appTokens=[AppWindowToken{ae9bcb7 token=Token{58a53c7 ActivityRecord{3c16106 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{aaecd1f token=Token{72108be ActivityRecord{4d48379 u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{1de4337 token=Token{1c4cce5 ActivityRecord{eafb3dc u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{833e334 token=Token{3150607 ActivityRecord{d5a7446 u0 com.android.mms/.ui.MessagingPreferenceActivity t470}}}, AppWindowToken{2a510e3 token=Token{c22b112 ActivityRecord{b5089d u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{ba134dc token=Token{993754f ActivityRecord{86b73ae u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{c6dbbe9 token=Token{bd77727 ActivityRecord{6a34c41 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{f142eaa token=Token{6cc657f ActivityRecord{70e469e u0 com.android.mms/.ui.MessagingPreferenceActivity t470}}}, AppWindowToken{c75e755 token=Token{4c3f20c ActivityRecord{fa3293f u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{8693e35 token=Token{a956609 ActivityRecord{8942b10 u0 com.android.mms/.ui.ComposeMessageActivity t232}}}, AppWindowToken{5c70d81 token=Token{d9e6568 ActivityRecord{b34208b u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{19989f0 token=Token{e1a6233 ActivityRecord{5e035a2 u0 com.android.mms/.ui.MessagingPreferenceActivity t470}}}, AppWindowToken{aa8ca9e token=Token{33ca0d9 ActivityRecord{5db4f20 u0 com.android.mms/.ui.SmsPreferenceActivity t470}}}, AppWindowToken{1d926be token=Token{4563612 ActivityRecord{e55e874 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{5757ec3 token=Token{41aaa72 ActivityRecord{dd58b7d u0 com.android.mms/.ui.SearchConversationActivity t470}}}, AppWindowToken{6674364 token=Token{95608f7 ActivityRecord{222ecf6 u0 com.android.mms/.ui.ComposeMessageActivity t499}}}, AppWindowToken{7e1b21c token=Token{53e9f8f ActivityRecord{afbdeee u0 com.android.mms/.ui.ComposeMessageActivity t232}}}, AppWindowToken{2520d2e token=Token{b3b573d ActivityRecord{5010ce7 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{36f253 token=Token{b267bd5 ActivityRecord{940088c u0 com.android.mms/.ui.ComposeMessageActivity t499}}}, AppWindowToken{bc306e8 token=Token{76eebef ActivityRecord{f8620ce u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{81bd64a token=Token{4a31fb5 ActivityRecord{ebb4fec u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{81887e6 token=Token{488b10c ActivityRecord{42ba85e u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{21804fa token=Token{12d1b25 ActivityRecord{eeb531c u0 com.android.mms/.ui.MessagingPreferenceActivity t470}}}, AppWindowToken{4b37307 token=Token{e1b1be ActivityRecord{c1cd940 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{cfac063 token=Token{b8b6e92 ActivityRecord{c7c4c1d u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{1d7627c token=Token{fbd020 ActivityRecord{f47a452 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{5002c62 token=Token{3d069ac ActivityRecord{3fe3b5f u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{9b74477 token=Token{f07a608 ActivityRecord{8affdfa u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{3cc5e55 token=Token{81de50c ActivityRecord{f31083f u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{6887990 token=Token{972f01d ActivityRecord{c9c02c7 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{e305c5b token=Token{2169f6a ActivityRecord{354d955 u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{f6fb906 token=Token{9e5f9f5 ActivityRecord{9fa12df u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{eafe567 token=Token{8e1b526 ActivityRecord{b440081 u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{e465bf2 token=Token{7dbdc51 ActivityRecord{dfced78 u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{18e58da token=Token{6bad285 ActivityRecord{b89cbfc u0 com.android.mms/.ui.ComposeMessageActivity t470}}}, AppWindowToken{59d2447 token=Token{e8b1675 ActivityRecord{781e9ac u0 com.android.mms/.ui.ConversationList t470}}}, AppWindowToken{7fb9721 token=Token{156b3 ActivityRecord{8f02c22 u0 下面这个hold住了 29 个ComposeMessageActivity Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained HeapmArray java.lang.Object[180] @ 0x14d79ce8| 29 | 736 | 19,256 | 736下面这个hold住了 32 个 ConversationList Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained HeapmArray java.lang.Object[180] @ 0x14d79ce8| 32 | 736 | 11,520 | 736也就是说因为某种原因ConversationList压根没有被释放 排除com.android.mms的问题adb shell kill -9 com.android.mms 问题依然存在.但是,这些对象都有所减少. Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 761 | 334,840 | &gt;= 1,964,544com.android.server.wm.WindowStateAnimator | 761 | 170,464 | &gt;= 414,736com.android.server.wm.WindowState$WindowId | 761 | 24,352 | &gt;= 43,016 com.android.server.wm.WindowState$DeathRecipient| 761 | 12,176 | &gt;= 12,408#################################################3 adb shell kill -9 23,153K: com.android.phone (pid 3862)没有减少: Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 763 | 335,720 | &gt;= 1,970,008com.android.server.wm.WindowStateAnimator | 763 | 170,912 | &gt;= 415,824com.android.server.wm.WindowState$WindowId | 763 | 24,416 | &gt;= 43,128 com.android.server.wm.WindowState$DeathRecipient| 763 | 12,208 | &gt;= 12,440adb shell kill -9 com.android.systemuiadb shell kill -9 com.android.dialer 都没有减少 Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 761 | 334,840 | &gt;= 1,964,496com.android.server.wm.WindowStateAnimator | 761 | 170,464 | &gt;= 414,736com.android.server.wm.WindowState$WindowId | 761 | 24,352 | &gt;= 43,016 com.android.server.wm.WindowState$DeathRecipient| 761 | 12,176 | &gt;= 12,408Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained HeapmAppAnimator com.android.server.wm.AppWindowAnimator @ 0x15041678| 1 | 96 | 96 | 288Type|Name |Valueref |mDescriptor|java.lang.String @ 0x70c4d0e8Type|Name|Valuebyte|[0] |97byte|[1] |110byte|[2] |100byte|[3] |114byte|[4] |111byte|[5] |105byte|[6] |100byte|[7] |46byte|[8] |118byte|[9] |105byte|[10]|101byte|[11]|119byte|[12]|46byte|[13]|73byte|[14]|65byte|[15]|112byte|[16]|112byte|[17]|108byte|[18]|105byte|[19]|99byte|[20]|97byte|[21]|116byte|[22]|105byte|[23]|111byte|[24]|110byte|[25]|84byte|[26]|111byte|[27]|107byte|[28]|101 byte|[29]|110转成字符串:a n d r o i d . v i e w . I A p p l i c a t i o n T o k e n 日了狗了…哎. 找出申请和释放 WindowStateAnimator的地方,加上LOG,再测试复现 for i in cat all_process.txt | awk &#39;{print $2}&#39;;do adb shell kill -9 $i; sleep 30;adb shell am dumpheap 1061 /data/local/tmp/1061.hprof;sleep 30; adb pull /data/local/tmp/1061.hprof; mv 1061.hprof after_$i_1061.hprof;hprof-conv after_$i_1061.hprof after_$i_1061_mat.hprof;done for i in cat all_process.txt | awk &#39;{print $2}&#39;;do echo adb shell kill -9 $i &amp;&amp; echo sleep 5 &amp;&amp; echo adb shell am dumpheap 1061 /data/local/tmp/1061.hprof &amp;&amp; echo sleep 30 &amp;&amp; echo adb pull /data/local/tmp/1061.hprof &amp;&amp; echo mv 1061.hprof after-$i-1061.hprof &amp;&amp; echo hprof-conv after-$i-1061.hprof after-$i-1061_mat.hprof &amp;&amp; echo ———————— ; done for i in cat all_process.txt | awk &#39;{print $2}&#39;;do adb shell kill -9 $i &amp;&amp; sleep 5 &amp;&amp; adb shell am dumpheap 1061 /data/local/tmp/1061.hprof &amp;&amp; sleep 30 &amp;&amp; adb pull /data/local/tmp/1061.hprof &amp;&amp; mv 1061.hprof after-$i-1061.hprof &amp;&amp; hprof-conv after-$i-1061.hprof after-$i-1061_mat.hprof &amp;&amp; echo ———————— ; done kill 了 所有 com. 打头的APP, Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 759 | 333,960 | &gt;= 1,959,816com.android.server.wm.WindowStateAnimator | 759 | 170,016 | &gt;= 413,568com.android.server.wm.WindowState$WindowId | 759 | 24,288 | &gt;= 42,904com.android.server.wm.WindowState$UpdateReportedVisibilityResults| 785 | 18,840 | &gt;= 19,032 com.android.server.wm.WindowState$DeathRecipient | 759 | 12,144 | &gt;= 12,376还是需要在system_server里面排查未释放的原因. 可以在 ActivityRecord 里面找对应的 strings.01-01 12:58:16.621 823 3071 W jackywei: this = 48097705,wallpaperTarget.mAppToken = AppWindowToken{50cb356 token=Token{e782efb ActivityRecord{265988a u0 com.android.phone/.EmergencyDialer t7}}} 大部分指向:com.google.android.apps.searchlite ################################################################################################### Class Name | Shallow Heap | Retained Heap | Percentagecom.android.server.wm.WindowStateAnimator @ 0x154814c8| 224 | 544 | 0.00%Type|Name |Valueref |mAppToken|com.android.server.wm.AppWindowToken @ 0x15480e60Type|Name |Valueref |appToken|com.android.server.am.ActivityRecord$Token @ 0x154811b0Type|Name |Valueref |weakActivity|java.lang.ref.WeakReference @ 0x154821a8Type|Name |Valueref |referent|com.android.server.am.ActivityRecord @ 0x154821f0Type|Name |Valueref |appInfo|android.content.pm.ApplicationInfo @ 0x1444b0e0Type|Name |Valueref |dataDir|java.lang.String @ 0x1444bc58Type|Name |Valueref |value |/data/user/0/com.google.android.apps.searchlite ref |shadow$klass|class java.lang.String @ 0x706ea708Type|Name |Valueref |value|com.google.android.apps.searchlite.SearchLiteApp_ApplicationType|Name |Valueref |value |/data/user/0/com.google.android.apps.searchlite ref |shadow$klass|class java.lang.String @ 0x706ea708################################################################################################### Type|Name |Valueref |mAppAnimator|com.android.server.wm.AppWindowAnimator @ 0x154811d0################################################################################################### ################################################################################################### Class Name | Shallow Heap | Retained Heap | Percentagecom.android.server.wm.WindowStateAnimator @ 0x154838f0| 224 | 544 | 0.00%Type|Name |Valueref |mAppAnimator|com.android.server.wm.AppWindowAnimator @ 0x154835f8Type|Name |Valueref |mAppToken|com.android.server.wm.AppWindowToken @ 0x15483288Type|Name |Valueref |appToken|com.android.server.am.ActivityRecord$Token @ 0x154835d8Type|Name |Valueref |referent|com.android.server.am.ActivityRecord @ 0x15484618Type|Name |Valueref |appInfo|android.content.pm.ApplicationInfo @ 0x1444b0e0Type|Name |Valueref |dataDir|java.lang.String @ 0x1444bc58Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained HeapmTokenMap java.util.HashMap @ 0x1439cd50| 1 | 40 | 224 | 27,152Type |Name |Valueref |entrySet |nullfloat|loadFactor |0.75int |modCount |10233int |size |787ref |table |java.util.HashMap$Node[2048] @ 0x1439d1f8int |threshold |1536ref |keySet |nullref |values |java.util.HashMap$Values @ 0x1439d1e8ref |shadow$klass |class java.util.HashMap @ 0x706ec4c8 int |shadow$monitor|0","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"system_server内存泄漏","slug":"BUG解析/system_server内存泄露","date":"2018-12-13T07:53:54.437Z","updated":"2018-12-13T07:52:54.021Z","comments":true,"path":"2018/12/13/bug-jie-xi/system-server-nei-cun-xie-lu/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/system-server-nei-cun-xie-lu/","excerpt":"","text":"卡顿原因:用android Device Monitor 获取的文件中:ddms8967132311110557686.trace windowContainer.ForAllWindows 超过2.7秒 抓取 hprof文件分析:找到和ForAllWindows函数相关的对象: adb shell ps | grep -i system_server ps = 923 adb shell am dumpheap 923 /data/local/tmp/923.hprof hprof-conv 923.hprof 923_mat.hprof Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.wm.WindowState | 855 | 376,200 | &gt;= 2,204,304com.android.server.wm.WindowStateAnimator | 855 | 191,520 | &gt;= 465,872com.android.server.wm.WindowState$WindowId | 855 | 27,360 | &gt;= 48,280com.android.server.wm.WindowState$UpdateReportedVisibilityResults| 911 | 21,864 | &gt;= 22,056 com.android.server.wm.WindowState$DeathRecipient | 855 | 13,680 | &gt;= 13,912Class Name | Objects | Shallow Heap | Retained Heapcom.android.server.am.ActivityRecord | 921 | 353,664 | &gt;= 2,144,720 com.android.server.am.ActivityRecord$Token| 955 | 30,560 | &gt;= 53,848Type|Name |Valueref |appToken|com.android.server.am.ActivityRecord$Token @ 0x16f12f88Type|Name |Valueref |appInfo |android.content.pm.ApplicationInfo @ 0x1542e100ref |appToken|com.android.server.am.ActivityRecord$Token @ 0x16f12f88 ref |compat |android.content.res.CompatibilityInfo @ 0x17065af0Class Name | Objects | Shallow Heap | Retained Heapandroid.content.res.CompatibilityInfo| 945 | 22,680 | &gt;= 22,952ActivityRecord 也有泄漏????? PATH TO GC ROOT Class Name | Shallow Heap | Retained Heapcom.android.server.wm.WindowState @ 0x15826d18 | 440 | 3,664‘- [0] com.android.server.wm.WindowState[20] @ 0x15825c10 | 96 | 96 ‘- mPendingRemoveTmp com.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack| 512 | 5,064Merge GC ROOT: Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained Heapcom.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 1 | 512 | 440 | 5,064‘- mPendingRemoveTmp com.android.server.wm.WindowState[20] @ 0x15825c10| 1 | 96 | 440 | 96 ‘- [0] com.android.server.wm.WindowState @ 0x15826d18 | 1 | 440 | 440 | 3,664+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++PATH TO GC ROOT Class Name | Shallow Heap | Retained Heapcom.android.server.wm.WindowState @ 0x14be1080 | 440 | 2,536‘- mWin com.android.server.wm.WindowStateAnimator @ 0x14be0e78 | 224 | 544 ‘- [0] java.lang.Object[10] @ 0x14be0e40 | 56 | 56 ‘- elementData java.util.ArrayList @ 0x14be0d98 | 24 | 80 ‘- mAllAppWinAnimators com.android.server.wm.AppWindowAnimator @ 0x14be0b80 | 96 | 288 ‘- mAppAnimator com.android.server.wm.AppWindowToken @ 0x14be0810 | 200 | 1,272 ‘- value java.util.HashMap$Node @ 0x12dbe658 | 24 | 24 ‘- [1511] java.util.HashMap$Node[2048] @ 0x12db91f8 | 8,208 | 30,192 ‘- table java.util.HashMap @ 0x12db86a0 | 40 | 30,248 ‘- mTokenMap com.android.server.wm.DisplayContent @ 0x12db7bd0 | 312 | 58,344 |- mDisplayContent com.android.server.wm.AppWindowToken @ 0x14bc22d8 | 200 | 1,256 | |- mFocusedApp com.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 512 | 5,064 | |- mAppToken, mToken, mParent com.android.server.wm.WindowState @ 0x12db24d8 | 440 | 3,064 | | |- mCurrentFocus, mLastFocus com.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack| 512 | 5,064 | | |- this$0 com.android.server.wm.WindowState$DeathRecipient @ 0x12d9d5d0 Native Stack | 16 | 16 | | |- mInputFocus com.android.server.wm.InputMonitor @ 0x15501a98 | 56 | 728 | | | &apos;- mInputMonitor com.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 512 | 5,064 Merge GC ROOT: Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained Heapcom.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 1 | 512 | 440 | 5,064‘- mFocusedApp com.android.server.wm.AppWindowToken @ 0x14bc22d8 | 1 | 200 | 440 | 1,256 ‘- mDisplayContent com.android.server.wm.DisplayContent @ 0x12db7bd0 | 1 | 312 | 440 | 58,344 ‘- mTokenMap java.util.HashMap @ 0x12db86a0 | 1 | 40 | 440 | 30,248 ‘- table java.util.HashMap$Node[2048] @ 0x12db91f8 | 1 | 8,208 | 440 | 30,192 ‘- [1511] java.util.HashMap$Node @ 0x12dbe658 | 1 | 24 | 440 | 24 ‘- value com.android.server.wm.AppWindowToken @ 0x14be0810 | 1 | 200 | 440 | 1,272 ‘- mAppAnimator com.android.server.wm.AppWindowAnimator @ 0x14be0b80 | 1 | 96 | 440 | 288 ‘- mAllAppWinAnimators java.util.ArrayList @ 0x14be0d98 | 1 | 24 | 440 | 80 ‘- elementData java.lang.Object[10] @ 0x14be0e40 | 1 | 56 | 440 | 56 ‘- [0] com.android.server.wm.WindowStateAnimator @ 0x14be0e78| 1 | 224 | 440 | 544 &apos;- mWin com.android.server.wm.WindowState @ 0x14be1080 | 1 | 440 | 440 | 2,536 对象实例:mAppAnimator com.android.server.wm.AppWindowAnimator @ 0x14be0b80说明:都是mDisplayContent的mTokenMap持有.没有释放. Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained Heapcom.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 1 | 512 | 96 | 5,064‘- mFocusedApp com.android.server.wm.AppWindowToken @ 0x14bc22d8 | 1 | 200 | 96 | 1,256 ‘- mDisplayContent com.android.server.wm.DisplayContent @ 0x12db7bd0 | 1 | 312 | 96 | 58,344 ‘- mTokenMap java.util.HashMap @ 0x12db86a0 | 1 | 40 | 96 | 30,248 ‘- table java.util.HashMap$Node[2048] @ 0x12db91f8 | 1 | 8,208 | 96 | 30,192 ‘- [1511] java.util.HashMap$Node @ 0x12dbe658 | 1 | 24 | 96 | 24 ‘- value com.android.server.wm.AppWindowToken @ 0x14be0810 | 1 | 200 | 96 | 1,272 &apos;- mAppAnimator com.android.server.wm.AppWindowAnimator @ 0x14be0b80| 1 | 96 | 96 | 288 Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained Heapcom.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 1 | 512 | 96 | 5,064‘- mFocusedApp com.android.server.wm.AppWindowToken @ 0x14bc22d8 | 1 | 200 | 96 | 1,256 ‘- mDisplayContent com.android.server.wm.DisplayContent @ 0x12db7bd0 | 1 | 312 | 96 | 58,344 ‘- mTokenMap java.util.HashMap @ 0x12db86a0 | 1 | 40 | 96 | 30,248 ‘- table java.util.HashMap$Node[2048] @ 0x12db91f8 | 1 | 8,208 | 96 | 30,192 ‘- [792] java.util.HashMap$Node @ 0x12dbccc0 | 1 | 24 | 96 | 48 ‘- value com.android.server.wm.AppWindowToken @ 0x12ead060 | 1 | 200 | 96 | 1,296 &apos;- mAppAnimator com.android.server.wm.AppWindowAnimator @ 0x12eada90| 1 | 96 | 96 | 288 Class Name | Shallow Heap | Retained Heap | Percentagecom.android.server.wm.AppWindowAnimator @ 0x14be0b80| 96 | 288 | 0.00%应用died的时候会主动释放: 01-02 12:44:01.223 746 1581 W jackywei: removeWindowToken01-02 12:44:01.225 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:858)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.225 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.226 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++01-02 12:44:01.227 746 1581 W jackywei: removeWindowToken01-02 12:44:01.228 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.WindowToken.removeImmediately(WindowToken.java:239)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeImmediately(AppWindowToken.java:528)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeIfPossible(AppWindowToken.java:535)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.onRemovedFromDisplay(AppWindowToken.java:601)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:871)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.228 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.228 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++ ActivityManagerService.java: private final void handleAppDiedLocked(ProcessRecord app, boolean restarting, boolean allowRestart) { // Remove this application’s activities from active lists.boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); ——–&gt; ActivityStackSupervisor.java:boolean handleAppDiedLocked(ProcessRecord app) { boolean hasVisibleActivities = false; for (int displayNdx = mActivityDisplays.size() - 1; displayNdx &gt;= 0; –displayNdx) { final ArrayList stacks = mActivityDisplays.valueAt(displayNdx).mStacks; for (int stackNdx = stacks.size() - 1; stackNdx &gt;= 0; –stackNdx) { hasVisibleActivities |= stacks.get(stackNdx).handleAppDiedLocked(app); } } return hasVisibleActivities;} mActivityDisplays ? 大小:mSize = 1 Type|Name |Valueref |mActivityDisplays|android.util.SparseArray @ 0x14bc0ad0Type |Name |Valueboolean|mGarbage |falseref |mKeys |int[11] @ 0x14bd1160int |mSize |1ref |mValues |java.lang.Object[11] @ 0x14bd1198ref |shadow$klass |class android.util.SparseArray @ 0x7036c860 int |shadow$monitor|0大小:mSize = 1boolean handleAppDiedLocked(ProcessRecord app) { boolean hasVisibleActivities = false; for (int displayNdx = mActivityDisplays.size() - 1; displayNdx &gt;= 0; –displayNdx) { final ArrayList stacks = mActivityDisplays.valueAt(displayNdx).mStacks; for (int stackNdx = stacks.size() - 1; stackNdx &gt;= 0; –stackNdx) { hasVisibleActivities |= stacks.get(stackNdx).handleAppDiedLocked(app); } } return hasVisibleActivities;} Type|Name |Valueref |mStacks|java.util.ArrayList @ 0x12dc5ec0mStacks: size 3 Type|Name |Valueref |elementData |java.lang.Object[10] @ 0x12dc61c0int |size |3int |modCount |12097ref |shadow$klass |class java.util.ArrayList @ 0x6ff70c38 int |shadow$monitor|0———&gt; ActivityStack.java : boolean handleAppDiedLocked(ProcessRecord app) { if (mPausingActivity != null &amp;&amp; mPausingActivity.app == app) { if (DEBUG_PAUSE || DEBUG_CLEANUP) Slog.v(TAG_PAUSE, “App died while pausing: “ + mPausingActivity); mPausingActivity = null; } if (mLastPausedActivity != null &amp;&amp; mLastPausedActivity.app == app) { mLastPausedActivity = null; mLastNoHistoryActivity = null; } return removeHistoryRecordsForAppLocked(app); } private boolean removeHistoryRecordsForAppLocked(ProcessRecord app) { removeHistoryRecordsForAppLocked(mLRUActivities, app, “mLRUActivities”); removeHistoryRecordsForAppLocked(mStackSupervisor.mStoppingActivities, app, “mStoppingActivities”); removeHistoryRecordsForAppLocked(mStackSupervisor.mGoingToSleepActivities, app, “mGoingToSleepActivities”); removeHistoryRecordsForAppLocked(mStackSupervisor.mActivitiesWaitingForVisibleActivity, app, “mActivitiesWaitingForVisibleActivity”); removeHistoryRecordsForAppLocked(mStackSupervisor.mFinishingActivities, app, “mFinishingActivities”); boolean hasVisibleActivities = false; // Clean out the history list. int i = numActivities(); if (DEBUG_CLEANUP) Slog.v(TAG_CLEANUP, &quot;Removing app &quot; + app + &quot; from history with &quot; + i + &quot; entries&quot;); for (int taskNdx = mTaskHistory.size() - 1; taskNdx &gt;= 0; --taskNdx) { final ArrayList&lt;ActivityRecord&gt; activities = mTaskHistory.get(taskNdx).mActivities; for (int activityNdx = activities.size() - 1; activityNdx &gt;= 0; --activityNdx) { final ActivityRecord r = activities.get(activityNdx); --i; if (DEBUG_CLEANUP) Slog.v(TAG_CLEANUP, &quot;Record #&quot; + i + &quot; &quot; + r + &quot;: app=&quot; + r.app); if (r.app == app) {//如果这里没有相等的APP实例,remove 就一直是 false. if (r.visible) { hasVisibleActivities = true; } final boolean remove; if ((!r.haveState &amp;&amp; !r.stateNotNeeded) || r.finishing) {//这里的三个状态 // Don&apos;t currently have state for the activity, or // it is finishing -- always remove it. remove = true; } else if (!r.visible &amp;&amp; r.launchCount &gt; 2 &amp;&amp; r.lastLaunchTime &gt; (SystemClock.uptimeMillis() - 60000)) { // We have launched this activity too many times since it was // able to run, so give up and remove it. // (Note if the activity is visible, we don&apos;t remove the record. // We leave the dead window on the screen but the process will // not be restarted unless user explicitly tap on it.) remove = true; } else { // The process may be gone, but the activity lives on! remove = false; } if (remove) { if (DEBUG_ADD_REMOVE || DEBUG_CLEANUP) Slog.i(TAG_ADD_REMOVE, &quot;Removing activity &quot; + r + &quot; from stack at &quot; + i + &quot;: haveState=&quot; + r.haveState + &quot; stateNotNeeded=&quot; + r.stateNotNeeded + &quot; finishing=&quot; + r.finishing + &quot; state=&quot; + r.state + &quot; callers=&quot; + Debug.getCallers(5)); if (!r.finishing) { Slog.w(TAG, &quot;Force removing &quot; + r + &quot;: app died, no saved state&quot;); EventLog.writeEvent(EventLogTags.AM_FINISH_ACTIVITY, r.userId, System.identityHashCode(r), r.getTask().taskId, r.shortComponentName, &quot;proc died without state saved&quot;); if (r.state == ActivityState.RESUMED) { mService.updateUsageStats(r, false); } } } else { // We have the current state for this activity, so // it can be restarted later when needed. if (DEBUG_ALL) Slog.v(TAG, &quot;Keeping entry, setting app to null&quot;); if (DEBUG_APP) Slog.v(TAG_APP, &quot;Clearing app during removeHistory for activity &quot; + r); r.app = null; // Set nowVisible to previous visible state. If the app was visible while // it died, we leave the dead window on screen so it&apos;s basically visible. // This is needed when user later tap on the dead window, we need to stop // other apps when user transfers focus to the restarted activity. r.nowVisible = r.visible; if (!r.haveState) { if (DEBUG_SAVED_STATE) Slog.i(TAG_SAVED_STATE, &quot;App died, clearing saved state of &quot; + r); r.icicle = null; } } cleanUpActivityLocked(r, true, true); if (remove) { removeActivityFromHistoryLocked(r, &quot;appDied&quot;);//在这里会释放removeWindowToken } } } } return hasVisibleActivities; } private void removeHistoryRecordsForAppLocked(ArrayList list, ProcessRecord app, String listName) { int i = list.size(); if (DEBUG_CLEANUP) Slog.v(TAG_CLEANUP, “Removing app “ + app + “ from list “ + listName + “ with “ + i + “ entries”); while (i &gt; 0) { i–; ActivityRecord r = list.get(i); if (DEBUG_CLEANUP) Slog.v(TAG_CLEANUP, “Record #” + i + “ “ + r); if (r.app == app) { if (DEBUG_CLEANUP) Slog.v(TAG_CLEANUP, “—&gt; REMOVING this entry!”); list.remove(i); removeTimeoutsForActivityLocked(r); } }} Class Name | Shallow Heap | Retained Heap | Percentagecom.android.server.am.ActivityRecord @ 0x14bf1378| 384 | 3,208 | 0.01%Type |Name |Valueref |app |nullref |appInfo |android.content.pm.ApplicationInfo @ 0x12de8bb8ref |appTimeTracker |nullref |appToken |com.android.server.am.ActivityRecord$Token @ 0x14bf0340ref |compat |android.content.res.CompatibilityInfo @ 0x14bf1548boolean|componentSpecified |falseint |configChangeFlags |0ref |connections |nulllong |cpuTimeAtResume |0long |createTime |1529665655297boolean|deferRelaunchUntilPaused |falseboolean|delayedResume |falselong |displayStartTime |0boolean|finishing |falseboolean|forceNewConfig |falseboolean|frontOfTask |falseboolean|frozenBeforeDestroy |falseboolean|fullscreen |truelong |fullyDrawnStartTime |0boolean|hasBeenLaunched |trueboolean|haveState |trueref |icicle |android.os.Bundle @ 0x14bf1560int |icon |2130903043boolean|idle |trueboolean|immersive |falseboolean|inHistory |trueref |info |android.content.pm.ActivityInfo @ 0x149cd150ref |intent |android.content.Intent @ 0x14bf1578boolean|keysPaused |falseint |labelRes |2131954418long |lastLaunchTime |82773638long |lastVisibleTime |82780913int |launchCount |0boolean|launchFailed |falseint |launchMode |0long |launchTickTime |0ref |launchedFromPackage |java.lang.String @ 0x14bf15b8int |launchedFromPid |-1int |launchedFromUid |10036boolean|launching |trueint |logo |2130903043int |mActivityType |0ref |mBounds |android.graphics.Rect @ 0x14bf15e0boolean|mDeferHidingClient |falseref |mHorizontalSizeConfigurations |int[5] @ 0x14bf15f8ref |mLastReportedConfiguration |android.util.MergedConfiguration @ 0x14bf1618int |mLastReportedDisplayId |0boolean|mLastReportedMultiWindowMode |falseboolean|mLastReportedPictureInPictureMode|falseboolean|mLaunchTaskBehind |falseref |mPerf |android.util.BoostFramework @ 0x14bf1630ref |mPerf_iop |android.util.BoostFramework @ 0x14bf1640int |mRotationAnimationHint |-1boolean|mShowWhenLocked |falseref |mSmallestSizeConfigurations |int[8] @ 0x14bf1650ref |mStackSupervisor |com.android.server.am.ActivityStackSupervisor @ 0x12dc5dd8int |mStartingWindowState |2boolean|mTaskOverlay |falseref |mTmpBounds |android.graphics.Rect @ 0x14bf1680ref |mTmpConfig |android.content.res.Configuration @ 0x14bf1698boolean|mTurnScreenOn |falseboolean|mUpdateTaskThumbnailWhenHidden |falseref |mUxPerf |android.util.BoostFramework @ 0x14bf1708ref |mVerticalSizeConfigurations |int[4] @ 0x14bf1718ref |mWindowContainerController |com.android.server.wm.AppWindowContainerController @ 0x14bf00e0ref |newIntents |nullboolean|noDisplay |falseref |nonLocalizedLabel |nullboolean|nowVisible |falseref |packageName |java.lang.String @ 0x12dd83d8long |pauseTime |82807597ref |pendingOptions |android.app.ActivityOptions @ 0x14bf1738ref |pendingResults |nullboolean|pendingVoiceInteractionStart |falseint |perfActivityBoostHandler |-1ref |persistentState |nullref |pictureInPictureArgs |android.app.PictureInPictureParams @ 0x14bf17b0boolean|preserveWindowOnDeferredRelaunch |falseref |processName |java.lang.String @ 0x12dd83d8ref |realActivity |android.content.ComponentName @ 0x14bf17c8int |realTheme |2132017768int |requestCode |0ref |requestedVrComponent |nullref |resolvedType |java.lang.String @ 0x14bf17d8ref |resultTo |nullref |resultWho |nullref |results |nullref |returningOptions |nullboolean|rootVoiceInteraction |falseref |service |com.android.server.am.ActivityManagerService @ 0x12cd3f10ref |shortComponentName |java.lang.String @ 0x14bf17f8boolean|sleeping |falselong |startTime |0ref |state |com.android.server.am.ActivityStack$ActivityState @ 0x12dc97b0boolean|stateNotNeeded |falseboolean|stopped |trueref |stringName |java.lang.String @ 0x14bf1848boolean|supportsEnterPipOnTaskSwitch |trueref |task |com.android.server.am.TaskRecord @ 0x14bd2bf0ref |taskAffinity |java.lang.String @ 0x12dd83d8ref |taskDescription |android.app.ActivityManager$TaskDescription @ 0x14bf18b0int |theme |2132017768ref |uriPermissions |com.android.server.am.UriPermissionOwner @ 0x14bf18d8int |userId |0boolean|visible |falseboolean|visibleIgnoringKeyguard |falseref |voiceSession |nullint |windowFlags |16777216ref |mFullConfiguration |android.content.res.Configuration @ 0x14bf18f8ref |mMergedOverrideConfiguration |android.content.res.Configuration @ 0x14bf1968ref |mOverrideConfiguration |android.content.res.Configuration @ 0x14bf19d8ref |shadow$klass |class com.android.server.am.ActivityRecord @ 0x75a57328 int |shadow$monitor |-1950625590android@NSGWD180021:/data/workspace/issueAnalysis/system_server_memory_leak/0625$ adb shell ps | grep -i processu0_a18 499 276 1063700 24232 SyS_epoll_wait aa9e3658 S com.google.process.gservicesu0_a55 2683 276 1056528 21044 SyS_epoll_wait aa9e3658 S com.google.process.gappsu0_a18 2693 276 1059040 25804 SyS_epoll_wait aa9e3658 S com.google.process.gappsu0_a1 2871 276 1056696 26984 SyS_epoll_wait aa9e3658 S android.process.acoreu0_i460 3264 276 1062668 22268 SyS_epoll_wait aa9e3658 S com.android.chrome:sandboxed_process0u0_a12 3977 276 1072972 32456 SyS_epoll_wait aa9e3658 S android.process.media ################################################################################################################# Class Name | Ref. Objects | Shallow Heap | Ref. Shallow Heap | Retained Heapcom.android.server.wm.WindowManagerService @ 0x12cd2950 Native Stack | 1 | 512 | 440 | 5,064‘- mFocusedApp com.android.server.wm.AppWindowToken @ 0x14bc22d8 | 1 | 200 | 440 | 1,256 ‘- mDisplayContent com.android.server.wm.DisplayContent @ 0x12db7bd0 | 1 | 312 | 440 | 58,344 ‘- mTokenMap java.util.HashMap @ 0x12db86a0 | 1 | 40 | 440 | 30,248 ‘- table java.util.HashMap$Node[2048] @ 0x12db91f8 | 1 | 8,208 | 440 | 30,192 ‘- [1941] java.util.HashMap$Node @ 0x12dbf468 | 1 | 24 | 440 | 24 ‘- value com.android.server.wm.AppWindowToken @ 0x12e960b0 | 1 | 200 | 440 | 1,272 ‘- mAppAnimator com.android.server.wm.AppWindowAnimator @ 0x12e96a70 | 1 | 96 | 440 | 288 ‘- mAllAppWinAnimators java.util.ArrayList @ 0x12e96c88 | 1 | 24 | 440 | 80 ‘- elementData java.lang.Object[10] @ 0x12e96d30 | 1 | 56 | 440 | 56 ‘- [0] com.android.server.wm.WindowStateAnimator @ 0x12e96d68| 1 | 224 | 440 | 544 &apos;- mWin com.android.server.wm.WindowState @ 0x12e96f70 | 1 | 440 | 440 | 2,496 mTokenMap Class Name | Shallow Heap | Retained HeapmPidsSelfLocked com.android.server.am.ActivityManagerService @ 0x12cd3f10 Native Stack| 800 | 329,472Class Name | Shallow Heap | Retained Heap[36] java.lang.Object[95] @ 0x1563f618| 392 | 392I use the sdk tools catch the systrace log ,the log indicate that the android.anim thread spend a lot of cpu time.And I catch the traceview log, the log indicate that the com.android.server.wm.WindowContainer.forAllWindows function spend a lot of time to run in the android.anim thread. And I catch the window service log,show that there are so lot of AppWindowToken is not released. 直接debug system_server 看能否释放 sudo mount -t cifs -o username=”android”,password=”mobile#5” //10.1.6.36/android /mnt/10.1.6.36 用eclipse远程调试删除一个APP 看能否 正常释放:01-02 12:44:01.223 746 1581 W jackywei: removeWindowToken01-02 12:44:01.225 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:858)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.225 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.225 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.226 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++01-02 12:44:01.227 746 1581 W jackywei: removeWindowToken01-02 12:44:01.228 746 1581 W jackywei: java.lang.Throwable01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeWindowToken(DisplayContent.java:832)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.WindowToken.removeImmediately(WindowToken.java:239)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeImmediately(AppWindowToken.java:528)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.removeIfPossible(AppWindowToken.java:535)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowToken.onRemovedFromDisplay(AppWindowToken.java:601)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.DisplayContent.removeAppToken(DisplayContent.java:871)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.wm.AppWindowContainerController.removeContainer(AppWindowContainerController.java:246)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityRecord.removeWindowContainer(ActivityRecord.java:1001)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4169)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4544)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5095)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5413)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5594)01-02 12:44:01.228 746 1581 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1641)01-02 12:44:01.228 746 1581 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844)01-02 12:44:01.228 746 1581 W jackywei: ++++++++++++++++++++removeWindowToken++++++++++++++++++++ DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1525DisplayContent.findFocusedWindow() line: 2265RootWindowContainer.computeFocusedWindow() line: 170WindowManagerService.updateFocusedWindowLocked(int, boolean) line: 5993DisplayContent.layoutAndAssignWindowLayersIfNeeded() line: 2289StackWindowController.positionChildAtTop(TaskWindowContainerController, boolean) line: 159ActivityStack.insertTaskAtTop(TaskRecord, ActivityRecord) line: 2844ActivityStack.moveTaskToFrontLocked(TaskRecord, boolean, ActivityOptions, AppTimeTracker, String) line: 4620ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1613ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 Thread [Binder:923_1B] (Suspended (breakpoint at line 3402 in DisplayContent$TaskStackContainers)) owns: WindowHashMap (id=10090) owns: ActivityManagerService (id=165) DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3402 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1533 DisplayContent.findFocusedWindow() line: 2265 RootWindowContainer.computeFocusedWindow() line: 170 WindowManagerService.updateFocusedWindowLocked(int, boolean) line: 5993 DisplayContent.layoutAndAssignWindowLayersIfNeeded() line: 2289 StackWindowController.positionChildAtTop(TaskWindowContainerController, boolean) line: 159 ActivityStack.insertTaskAtTop(TaskRecord, ActivityRecord) line: 2844 ActivityStack.moveTaskToFrontLocked(TaskRecord, boolean, ActivityOptions, AppTimeTracker, String) line: 4620 ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1613 ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 Thread [android.anim] (Suspended (breakpoint at line 400 in InputMonitor)) owns: WindowHashMap (id=10090) InputMonitor.updateInputWindowsLw(boolean) line: 400 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2241 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 ViewRootImpl.relayoutWindow(WindowManager$LayoutParams, int, boolean) line: 6141 ViewRootImpl.performTraversals() line: 1905 ViewRootImpl.doTraversal() line: 1396 ViewRootImpl$TraversalRunnable.run() line: 6773 Choreographer$CallbackRecord.run(long) line: 966 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 713 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 632 in WindowContainer)) owns: WindowHashMap (id=10090) DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 632 DisplayContent.updateWindowsForAnimator(WindowAnimator) line: 2616 WindowAnimator.animate(long) line: 201 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 1525 in DisplayContent)) owns: WindowHashMap (id=10090) DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1525 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.prepareWindowSurfaces() line: 2637 WindowAnimator.animate(long) line: 203 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 查 看traceview 文件再分析一下animatetraceview 显示 animate 占了很大一部分运行时间CPU时间 mAnimationFrameCallback = frameTimeNs -&gt; { synchronized (mService.mWindowMap) { mAnimationFrameCallbackScheduled = false; } animate(frameTimeNs); }; void scheduleAnimation() { if (!mAnimationFrameCallbackScheduled) { mAnimationFrameCallbackScheduled = true; mChoreographer.postFrameCallback(mAnimationFrameCallback); //放到渲染线程里面 } } private void cancelAnimation() { if (mAnimationFrameCallbackScheduled) { mAnimationFrameCallbackScheduled = false; mChoreographer.removeFrameCallback(mAnimationFrameCallback);//移出渲染线程里面 } } private void animate(long frameTimeNs) { synchronized (mService.mWindowMap) { if (!mInitialized) { return; } // Schedule next frame already such that back-pressure happens continuously scheduleAnimation();//animate每次都会调用 } mAnimationFrameCallbackScheduled 很重要,cancelAnimation()才能致 false //下面的代码才能调 cancelAnimation if (mService.mDragState != null) { mAnimating |= mService.mDragState.stepAnimationLocked(mCurrentTime); } if (!mAnimating) { cancelAnimation(); } private final Consumer&lt;WindowState&gt; mUpdateWallpaperForAnimator = w -&gt; { final WindowStateAnimator winAnimator = w.mWinAnimator; if (winAnimator.mSurfaceController == null || !winAnimator.hasSurface()) { return; } final int flags = w.mAttrs.flags; // If this window is animating, make a note that we have an animating window and take // care of a request to run a detached wallpaper animation. if (winAnimator.mAnimating) { if (winAnimator.mAnimation != null) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; winAnimator.mAnimation.getDetachWallpaper()) { mTmpWindow = w; } final int color = winAnimator.mAnimation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } mTmpWindowAnimator.setAnimating(true); } // If this window&apos;s app token is running a detached wallpaper animation, make a note so // we can ensure the wallpaper is displayed behind it. final AppWindowAnimator appAnimator = winAnimator.mAppAnimator; if (appAnimator != null &amp;&amp; appAnimator.animation != null &amp;&amp; appAnimator.animating) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; appAnimator.animation.getDetachWallpaper()) { mTmpWindow = w; } final int color = appAnimator.animation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } }; @Override boolean forAllWindows(ToBooleanFunction&lt;WindowState&gt; callback, boolean traverseTopToBottom) { if (mChildren.isEmpty()) { // The window has no children so we just return it. return applyInOrderWithImeWindows(callback, traverseTopToBottom);// 这里? } if (traverseTopToBottom) { return forAllWindowTopToBottom(callback); } else { return forAllWindowBottomToTop(callback); } } private final Consumer&lt;WindowState&gt; mUpdateWallpaperForAnimator = w -&gt; { final WindowStateAnimator winAnimator = w.mWinAnimator; if (winAnimator.mSurfaceController == null || !winAnimator.hasSurface()) { return; } final int flags = w.mAttrs.flags; // If this window is animating, make a note that we have an animating window and take // care of a request to run a detached wallpaper animation. if (winAnimator.mAnimating) {// ?在这里? if (winAnimator.mAnimation != null) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; winAnimator.mAnimation.getDetachWallpaper()) { mTmpWindow = w; } final int color = winAnimator.mAnimation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } mTmpWindowAnimator.setAnimating(true); } // If this window&apos;s app token is running a detached wallpaper animation, make a note so // we can ensure the wallpaper is displayed behind it. final AppWindowAnimator appAnimator = winAnimator.mAppAnimator; if (appAnimator != null &amp;&amp; appAnimator.animation != null &amp;&amp; appAnimator.animating) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; appAnimator.animation.getDetachWallpaper()) { mTmpWindow = w; } final int color = appAnimator.animation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } }; Thread [android.anim] (Suspended (breakpoint at line 435 in WindowAnimator)) owns: WindowHashMap (id=142) WindowAnimator.setAnimating(boolean) line: 435 DisplayContent.lambda$-com_android_server_wm_DisplayContent_18415(WindowState) line: 408 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$4(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWallpaperForAnimator(WindowAnimator) line: 2628 WindowAnimator.animate(long) line: 202 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 private static final boolean OPTS_INPUT = SystemProperties.getBoolean(“persist.vendor.qti.inputopts.enable”,false); //这个很关键??????? // Enable/disable vsync for animations and drawing. private static final boolean USE_VSYNC = SystemProperties.getBoolean( “debug.choreographer.vsync”, true); 启动activity Thread [Binder:3041_D] (Suspended) owns: Object (id=374) owns: WindowHashMap (id=142) owns: ActivityManagerService (id=337) Choreographer.postCallbackDelayedInternal(int, Object, Object, long) line: 429 Choreographer.postFrameCallbackDelayed(Choreographer$FrameCallback, long) line: 509 Choreographer.postFrameCallback(Choreographer$FrameCallback) line: 489 WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 POWER ON 唤醒Thread [PowerManagerService] (Suspended (breakpoint at line 426 in Choreographer)) Choreographer.postCallbackDelayedInternal(int, Object, Object, long) line: 426 Choreographer.postCallbackDelayed(int, Runnable, Object, long) line: 415 Choreographer.postCallback(int, Runnable, Object) line: 389 RampAnimator.postAnimationCallback() line: 124 RampAnimator.animateTo(int, int) line: 103 DisplayPowerController.animateScreenBrightness(int, int) line: 986 DisplayPowerController.updatePowerState() line: 802 DisplayPowerController.-wrap6(DisplayPowerController) line: not available DisplayPowerController$DisplayControllerHandler.handleMessage(Message) line: 1421 DisplayPowerController$DisplayControllerHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 ServiceThread(HandlerThread).run() line: 65 ServiceThread.run() line: 46 @Override boolean forAllWindows(ToBooleanFunction&lt;WindowState&gt; callback, boolean traverseTopToBottom) { if (mChildren.isEmpty()) {//这里递归返回 // The window has no children so we just return it. return applyInOrderWithImeWindows(callback, traverseTopToBottom); } if (traverseTopToBottom) { return forAllWindowTopToBottom(callback); } else { return forAllWindowBottomToTop(callback); } } 设置 setAnimating 的trueThread [android.anim] (Suspended (breakpoint at line 435 in WindowAnimator)) owns: WindowHashMap (id=142) WindowAnimator.setAnimating(boolean) line: 435 DisplayContent.lambda$-com_android_server_wm_DisplayContent_18415(WindowState) line: 408 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$4(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 WallpaperWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$NonAppWindowContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWallpaperForAnimator(WindowAnimator) line: 2628 WindowAnimator.animate(long) line: 202 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 231 in WindowAnimator)) owns: WindowHashMap (id=163) WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 case PAUSE_TIMEOUT_MSG: { ActivityRecord r = (ActivityRecord)msg.obj; // We don&apos;t at this point know if the activity is fullscreen, // so we need to be conservative and assume it isn&apos;t. Slog.w(TAG, &quot;Activity pause timeout for &quot; + r); synchronized (mService) { if (r.app != null) { mService.logAppTooSlow(r.app, r.pauseTime, &quot;pausing &quot; + r); } activityPausedLocked(r.appToken, true); } } break; Thread [ActivityManager] (Suspended (breakpoint at line 426 in Choreographer)) owns: WindowHashMap (id=163) owns: ActivityManagerService (id=164) Choreographer.postCallbackDelayedInternal(int, Object, Object, long) line: 426 Choreographer.postFrameCallbackDelayed(Choreographer$FrameCallback, long) line: 509 Choreographer.postFrameCallback(Choreographer$FrameCallback) line: 489 WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityStack$ActivityStackHandler.handleMessage(Message) line: 401 ActivityStack$ActivityStackHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 ServiceThread(HandlerThread).run() line: 65 ServiceThread.run() line: 46 Thread [Binder:14721_8] (Suspended (breakpoint at line 4035 in WindowState)) owns: WindowHashMap (id=146) owns: ActivityManagerService (id=147) WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 WindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$NonAppWindowContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent.findFocusedWindow() line: 2267 RootWindowContainer.computeFocusedWindow() line: 170 WindowManagerService.updateFocusedWindowLocked(int, boolean) line: 5993 DisplayContent.layoutAndAssignWindowLayersIfNeeded() line: 2291 StackWindowController.positionChildAtTop(TaskWindowContainerController, boolean) line: 159 ActivityStack.insertTaskAtTop(TaskRecord, ActivityRecord) line: 2844 ActivityStack.moveTaskToFrontLocked(TaskRecord, boolean, ActivityOptions, AppTimeTracker, String) line: 4620 ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1613 ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 退出APP Thread [Binder:14721_14] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 启动APP 1 Thread [Binder:14721_11] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) owns: ActivityManagerService (id=483) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 第2次 animate Thread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第3次 animate Thread [Binder:14721_12] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 第4次 animate Thread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第5次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第6次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第7次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第8次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第9次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第10次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第11次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第12次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第13次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第14次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第15次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第16次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.lambda$-com_android_server_wm_WindowSurfacePlacer_5337() line: 108 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$12() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第17次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第18次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第19次 animateThread [Binder:14721_13] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 第20次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第21次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第22次 animateThread [Binder:14721_10] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 第23次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第24次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第25次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.lambda$-com_android_server_wm_WindowSurfacePlacer_5337() line: 108 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$12() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第26次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第27次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第28次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowState.setupWindowForRemoveOnExit() line: 1994 WindowState.removeIfPossible(boolean) line: 1968 WindowState.removeIfPossible() line: 1848 WindowManagerService.removeWindow(Session, IWindow) line: 1733 Session.remove(IWindow) line: 222 TaskSnapshotSurface.remove() line: 260 AppWindowContainerController.lambda$-com_android_server_wm_AppWindowContainerController_31045(WindowManagerPolicy$StartingSurface) line: 658 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$5() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第29次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第30次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第31次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第32次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第33次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.lambda$-com_android_server_wm_WindowSurfacePlacer_5337() line: 108 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$12() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第34次 animateThread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 第35次 animateThread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.ui] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=460) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2061 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 ViewRootImpl.relayoutWindow(WindowManager$LayoutParams, int, boolean) line: 6141 ViewRootImpl.performTraversals() line: 1905 ViewRootImpl.doTraversal() line: 1396 ViewRootImpl$TraversalRunnable.run() line: 6773 Choreographer$CallbackRecord.run(long) line: 966 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 713 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 UiThread(HandlerThread).run() line: 65 UiThread(ServiceThread).run() line: 46 UiThread.run() line: 42 Thread [android.anim] (Suspended (breakpoint at line 609 in WindowState)) owns: WindowHashMap (id=460) WindowState.(WindowManagerService, Session, IWindow, WindowToken, WindowState, int, int, WindowManager$LayoutParams, int, int, boolean) line: 609 WindowManagerService.addWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 1396 Session.addToDisplay(IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 202 TaskSnapshotSurface.create(WindowManagerService, AppWindowToken, ActivityManager$TaskSnapshot) line: 199 TaskSnapshotController.createStartingSurface(AppWindowToken, ActivityManager$TaskSnapshot) line: 203 SnapshotStartingData.createStartingSurface(AppWindowToken) line: 39 AppWindowContainerController.lambda$-com_android_server_wm_AppWindowContainerController_4735() line: 145 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$4() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 启动APP的调用堆栈, scheduleAddStartingWindow调用mAddStartingWindow Thread [Binder:14721_16] (Suspended (breakpoint at line 593 in AppWindowContainerController)) owns: WindowHashMap (id=460) owns: ActivityManagerService (id=483) AppWindowContainerController.scheduleAddStartingWindow() line: 593 AppWindowContainerController.createSnapshot(ActivityManager$TaskSnapshot) line: 603 AppWindowContainerController.addStartingWindow(String, int, CompatibilityInfo, CharSequence, int, int, int, int, IBinder, boolean, boolean, boolean, boolean, boolean, boolean) line: 502 ActivityRecord.showStartingWindow(ActivityRecord, boolean, boolean, boolean) line: 2241 ActivityRecord.showStartingWindow(ActivityRecord, boolean, boolean) line: 2226 ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1657 ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 Thread [android.anim] (Suspended (breakpoint at line 609 in WindowState)) owns: WindowHashMap (id=460) WindowState.(WindowManagerService, Session, IWindow, WindowToken, WindowState, int, int, WindowManager$LayoutParams, int, int, boolean) line: 609 WindowManagerService.addWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 1396 Session.addToDisplay(IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 202 TaskSnapshotSurface.create(WindowManagerService, AppWindowToken, ActivityManager$TaskSnapshot) line: 199 TaskSnapshotController.createStartingSurface(AppWindowToken, ActivityManager$TaskSnapshot) line: 203 SnapshotStartingData.createStartingSurface(AppWindowToken) line: 39 AppWindowContainerController.lambda$-com_android_server_wm_AppWindowContainerController_4735() line: 145 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$4() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 这里释放WindowState Thread [android.anim] (Suspended (breakpoint at line 1746 in WindowManagerService)) owns: WindowHashMap (id=460) WindowManagerService.postWindowRemoveCleanupLocked(WindowState) line: 1746 WindowState.removeImmediately() line: 1842 WindowState.destroySurface(boolean, boolean) line: 2842 AppWindowToken.destroySurfaces(boolean) line: 649 AppWindowToken.destroySurfaces() line: 633 WindowState.onExitAnimationDone() line: 4257 WindowStateAnimator.stepAnimationLocked(long) line: 474 DisplayContent.lambda$-com_android_server_wm_DisplayContent_16102(WindowState) line: 339 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$3(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWindowsForAnimator(WindowAnimator) line: 2618 WindowAnimator.animate(long) line: 201 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 1746 in WindowManagerService)) owns: WindowHashMap (id=1203) WindowManagerService.postWindowRemoveCleanupLocked(WindowState) line: 1746 WindowState.removeImmediately() line: 1842 WindowState.destroySurface(boolean, boolean) line: 2842 AppWindowToken.destroySurfaces(boolean) line: 649 AppWindowToken.destroySurfaces() line: 633 WindowState.onExitAnimationDone() line: 4257 WindowStateAnimator.stepAnimationLocked(long) line: 474 DisplayContent.lambda$-com_android_server_wm_DisplayContent_16102(WindowState) line: 339 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$3(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWindowsForAnimator(WindowAnimator) line: 2618 WindowAnimator.animate(long) line: 201 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Class Name | Shallow Heap | Retained HeapmAllAppWinAnimators com.android.server.wm.AppWindowAnimator @ 0x14eed5c0| 96 | 288Class Name | Shallow Heap | Retained HeapmAppAnimator com.android.server.wm.AppWindowToken @ 0x14eeac40| 200 | 1,272Thread [android.ui] (Suspended (breakpoint at line 844 in DisplayContent)) owns: WindowHashMap (id=460) owns: ViewRootImpl (id=1036) owns: Object (id=538) DisplayContent.reParentWindowToken(WindowToken) line: 844 WindowToken.onDisplayChanged(DisplayContent) line: 247 WindowToken.(WindowManagerService, IBinder, int, boolean, DisplayContent, boolean) line: 111 WindowManagerService.addWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 1329 Session.addToDisplay(IWindow, int, WindowManager$LayoutParams, int, int, Rect, Rect, Rect, InputChannel) line: 202 ViewRootImpl.setView(View, WindowManager$LayoutParams, View) line: 730 WindowManagerGlobal.addView(View, ViewGroup$LayoutParams, Display, Window) line: 356 WindowManagerImpl.addView(View, ViewGroup$LayoutParams) line: 94 AppNotRespondingDialog(Dialog).show() line: 330 AppErrors.handleShowAnrUi(Message) line: 1065 ActivityManagerService$UiHandler.handleMessage(Message) line: 1817 ActivityManagerService$UiHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 UiThread(HandlerThread).run() line: 65 UiThread(ServiceThread).run() line: 46 UiThread.run() line: 42 这里退出应用 调用cancelAnimation()的条件是: if (!mAnimating) { cancelAnimation(); } Thread [android.anim] (Suspended (breakpoint at line 413 in WindowAnimator)) owns: WindowHashMap (id=1203) WindowAnimator.cancelAnimation() line: 413 WindowAnimator.animate(long) line: 231 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 435 in WindowAnimator)) owns: WindowHashMap (id=1203) WindowAnimator.setAnimating(boolean) line: 435 DisplayContent.lambda$-com_android_server_wm_DisplayContent_18415(WindowState) line: 408 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$4(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWallpaperForAnimator(WindowAnimator) line: 2628 WindowAnimator.animate(long) line: 202 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=1203) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.lambda$-com_android_server_wm_WindowSurfacePlacer_5337() line: 108 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$12() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 调用scheduleAnimation APP DIED Thread [Binder:14721_1] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityManagerService.handleAppDiedLocked(ProcessRecord, boolean, boolean) line: 5435 ActivityManagerService.appDiedLocked(ProcessRecord, int, IApplicationThread, boolean) line: 5594 ActivityManagerService$AppDeathRecipient.binderDied() line: 1641 BinderProxy.sendDeathNotice(IBinder$DeathRecipient) line: 844 启动APP Thread [Binder:14721_15] (Suspended (breakpoint at line 593 in AppWindowContainerController)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) AppWindowContainerController.scheduleAddStartingWindow() line: 593 AppWindowContainerController.createSnapshot(ActivityManager$TaskSnapshot) line: 603 AppWindowContainerController.addStartingWindow(String, int, CompatibilityInfo, CharSequence, int, int, int, int, IBinder, boolean, boolean, boolean, boolean, boolean, boolean) line: 502 ActivityRecord.showStartingWindow(ActivityRecord, boolean, boolean, boolean) line: 2241 ActivityRecord.showStartingWindow(ActivityRecord, boolean, boolean) line: 2226 ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1657 ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 启动APPThread [Binder:14721_15] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 mAddStartingWindow 新增 WindowState Thread [Binder:14721_15] (Suspended (breakpoint at line 762 in WindowSurfacePlacer)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) WindowSurfacePlacer.requestTraversal() line: 762 WindowSurfacePlacer.performSurfacePlacementLoop() line: 203 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 Thread [android.anim] (Suspended (breakpoint at line 762 in WindowSurfacePlacer)) owns: WindowHashMap (id=1203) WindowSurfacePlacer.requestTraversal() line: 762 WindowManagerService.finishDrawingWindow(Session, IWindow) line: 2363 Session.finishDrawing(IWindow) line: 275 TaskSnapshotSurface.reportDrawn() line: 402 TaskSnapshotSurface.drawSnapshot() line: 292 TaskSnapshotSurface.create(WindowManagerService, AppWindowToken, ActivityManager$TaskSnapshot) line: 222 TaskSnapshotController.createStartingSurface(AppWindowToken, ActivityManager$TaskSnapshot) line: 203 SnapshotStartingData.createStartingSurface(AppWindowToken) line: 39 AppWindowContainerController.lambda$-com_android_server_wm_AppWindowContainerController_4735() line: 145 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$4() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 setAnimating 为true 就不会退出 Thread [android.anim] (Suspended (breakpoint at line 435 in WindowAnimator)) owns: WindowHashMap (id=1203) WindowAnimator.setAnimating(boolean) line: 435 DisplayContent.lambda$-com_android_server_wm_DisplayContent_18415(WindowState) line: 408 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$4(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWallpaperForAnimator(WindowAnimator) line: 2628 WindowAnimator.animate(long) line: 202 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 if (winAnimator.mAnimating) { if (winAnimator.mAnimation != null) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; winAnimator.mAnimation.getDetachWallpaper()) { mTmpWindow = w; } final int color = winAnimator.mAnimation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } mTmpWindowAnimator.setAnimating(true); } Thread [Binder:14721_15] (Suspended (breakpoint at line 762 in WindowSurfacePlacer)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) WindowSurfacePlacer.requestTraversal() line: 762 WindowSurfacePlacer.performSurfacePlacementLoop() line: 203 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 06-27 17:04:11.047 835 2286 V WindowManager: Starting animation in AppWindowToken{b6799a3 token=Token{d5ffdc3 ActivityRecord{d112627 u0 com.android.launcher3/.Launcher t13}}} @ 23774931 scale=1.0 allDrawn=true animating=false06-27 17:04:11.048 835 2286 V WindowManager: Starting animation in AppWindowToken{fcdff0a token=Token{ad2718b ActivityRecord{51a9a7c u0 com.android.dialer/.app.DialtactsActivity t193}}} @ 23774931 scale=1.0 allDrawn=true animating=false06-27 17:04:11.106 835 2286 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,9.0): com.android.dialer/com.android.dialer.app.DialtactsActivity06-27 17:04:11.122 835 2286 I WindowManager: &lt;&lt;&lt; CLOSE TRANSACTION animate06-27 17:04:11.596 835 2286 I WindowManager: &gt;&gt;&gt; OPEN TRANSACTION animate06-27 17:04:11.650 835 2286 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,322.0): com.android.dialer/com.android.dialer.app.DialtactsActivity06-27 17:04:11.661 835 2286 I WindowManager: &lt;&lt;&lt; CLOSE TRANSACTION animate06-27 17:04:11.663 835 2286 I WindowManager: &gt;&gt;&gt; OPEN TRANSACTION animate06-27 17:04:11.714 835 2286 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,939.0): com.android.dialer/com.android.dialer.app.DialtactsActivity06-27 17:04:11.727 835 2286 I WindowManager: &lt;&lt;&lt; CLOSE TRANSACTION animate06-27 17:04:11.739 835 2286 I WindowManager: &gt;&gt;&gt; OPEN TRANSACTION animate06-27 17:04:11.740 835 2286 V WindowManager: Animation done in AppWindowToken{b6799a3 token=Token{d5ffdc3 ActivityRecord{d112627 u0 com.android.launcher3/.Launcher t13}}}: reportedVisible=false okToDisplay=true okToAnimate=true startingDisplayed=false06-27 17:04:11.775 835 2286 V WindowManager: Animation done in AppWindowToken{fcdff0a token=Token{ad2718b ActivityRecord{51a9a7c u0 com.android.dialer/.app.DialtactsActivity t193}}}: reportedVisible=false okToDisplay=true okToAnimate=true startingDisplayed=false06-27 17:04:11.790 835 2286 V WindowManager: Animation done in WindowStateAnimator{c28623a com.android.launcher3/com.android.launcher3.Launcher}: exiting=false, reportedVisible=true06-27 17:04:11.791 835 2286 V WindowManager: Animation done in WindowStateAnimator{1cf447c com.android.dialer/com.android.dialer.app.DialtactsActivity}: exiting=true, reportedVisible=false06-27 17:04:11.826 835 2286 I WindowManager: SURFACE POS (setPositionInTransaction) @ (0.0,0.0): com.android.dialer/com.android.dialer.app.DialtactsActivity void scheduleAnimation() 动画启动流程 Winstate为什么没有释放 为什么forallwindows会走那么久 void requestTraversal() { if (!mTraversalScheduled) { mTraversalScheduled = true; mService.mAnimationHandler.post(mPerformSurfacePlacement); //替换? } } 启动APP时调用动画: Thread [Binder:14721_16] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=1203) owns: ActivityManagerService (id=1204) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 第一次进入animate 会再次调用 scheduleAnimation() 是否下次还需要走 animate 取决与条件 mAnimationFrameCallbackScheduledmAnimationFrameCallbackScheduled初始话默认是 false void scheduleAnimation() { if (!mAnimationFrameCallbackScheduled) { mAnimationFrameCallbackScheduled = true; mChoreographer.postFrameCallback(mAnimationFrameCallback); } } 取消下一次 animate 即 mChoreographer.removeFrameCallback(mAnimationFrameCallback); private void cancelAnimation() { if (mAnimationFrameCallbackScheduled) { mAnimationFrameCallbackScheduled = false; mChoreographer.removeFrameCallback(mAnimationFrameCallback); } } 但是函数里面有一个判断条件: if (mService.mDragState != null) { mAnimating |= mService.mDragState.stepAnimationLocked(mCurrentTime); } if (!mAnimating) { cancelAnimation(); } 整体的代码如下: private void animate(long frameTimeNs) { synchronized (mService.mWindowMap) { if (!mInitialized) { return; } // Schedule next frame already such that back-pressure happens continuously scheduleAnimation(); //这里先预定下一帧 } // Simulate back-pressure by opening and closing an empty animation transaction. This makes // sure that an animation frame is at least presented once on the screen. We do this outside // of the regular transaction such that we can avoid holding the window manager lock in case // we receive back-pressure from SurfaceFlinger. Since closing an animation transaction // without the window manager locks leads to ordering issues (as the transaction will be // processed only at the beginning of the next frame which may result in another transaction // that was executed later in WM side gets executed first on SF side), we don&apos;t update any // Surface properties here such that reordering doesn&apos;t cause issues. mService.executeEmptyAnimationTransaction(); synchronized (mService.mWindowMap) { mCurrentTime = frameTimeNs / TimeUtils.NANOS_PER_MS; mBulkUpdateParams = SET_ORIENTATION_CHANGE_COMPLETE; mAnimating = false; //每次都会设置为false mAppWindowAnimating = false; if (DEBUG_WINDOW_TRACE) { Slog.i(TAG, &quot;!!! animate: entry time=&quot; + mCurrentTime); } if (SHOW_TRANSACTIONS) Slog.i(TAG, &quot;&gt;&gt;&gt; OPEN TRANSACTION animate&quot;); mService.openSurfaceTransaction(); try { final AccessibilityController accessibilityController = mService.mAccessibilityController; final int numDisplays = mDisplayContentsAnimators.size(); for (int i = 0; i &lt; numDisplays; i++) { final int displayId = mDisplayContentsAnimators.keyAt(i); final DisplayContent dc = mService.mRoot.getDisplayContentOrCreate(displayId); dc.stepAppWindowsAnimation(mCurrentTime); //这里也可能会置mAppAnimator.animating = true; //这里设置为true DisplayContentsAnimator displayAnimator = mDisplayContentsAnimators.valueAt(i); final ScreenRotationAnimation screenRotationAnimation = displayAnimator.mScreenRotationAnimation; if (screenRotationAnimation != null &amp;&amp; screenRotationAnimation.isAnimating()) { if (screenRotationAnimation.stepAnimationLocked(mCurrentTime)) { setAnimating(true); } else { mBulkUpdateParams |= SET_UPDATE_ROTATION; screenRotationAnimation.kill(); displayAnimator.mScreenRotationAnimation = null; //TODO (multidisplay): Accessibility supported only for the default // display. if (accessibilityController != null &amp;&amp; dc.isDefaultDisplay) { // We just finished rotation animation which means we did not // announce the rotation and waited for it to end, announce now. accessibilityController.onRotationChangedLocked( mService.getDefaultDisplayContentLocked()); } } } // Update animations of all applications, including those // associated with exiting/removed apps ++mAnimTransactionSequence; dc.updateWindowsForAnimator(this); // 这里轮寻windows 可能会把 winAnimator.mAnimating 置为 true,这样可以影响下一个函数 dc.updateWallpaperForAnimator(this); // 这里有可能会把this.mAnimating 设置为true,mUpdateWallpaperForAnimator dc.prepareWindowSurfaces(); } for (int i = 0; i &lt; numDisplays; i++) { final int displayId = mDisplayContentsAnimators.keyAt(i); final DisplayContent dc = mService.mRoot.getDisplayContentOrCreate(displayId); dc.checkAppWindowsReadyToShow(); final ScreenRotationAnimation screenRotationAnimation = mDisplayContentsAnimators.valueAt(i).mScreenRotationAnimation; if (screenRotationAnimation != null) { screenRotationAnimation.updateSurfacesInTransaction(); } orAnimating(dc.animateDimLayers()); orAnimating(dc.getDockedDividerController().animate(mCurrentTime)); //TODO (multidisplay): Magnification is supported only for the default display. if (accessibilityController != null &amp;&amp; dc.isDefaultDisplay) { accessibilityController.drawMagnifiedRegionBorderIfNeededLocked(); } } if (mService.mDragState != null) { mAnimating |= mService.mDragState.stepAnimationLocked(mCurrentTime); } if (!mAnimating) { //这里不为false 时, 就不会取消cancelAnimation.意味着animate 还需要再跑一次, cancelAnimation(); //对应scheduleAnimation(),取消调预定的那一帧 } if (mService.mWatermark != null) { mService.mWatermark.drawIfNeeded(); } } catch (RuntimeException e) { Slog.wtf(TAG, &quot;Unhandled exception in Window Manager&quot;, e); } finally { mService.closeSurfaceTransaction(); if (SHOW_TRANSACTIONS) Slog.i(TAG, &quot;&lt;&lt;&lt; CLOSE TRANSACTION animate&quot;); } boolean hasPendingLayoutChanges = mService.mRoot.hasPendingLayoutChanges(this); boolean doRequest = false; if (mBulkUpdateParams != 0) { doRequest = mService.mRoot.copyAnimToLayoutParams(); } if (hasPendingLayoutChanges || doRequest) { mWindowPlacerLocked.requestTraversal(); } if (mAnimating &amp;&amp; !mLastAnimating) { // Usually app transitions but quite a load onto the system already (with all the // things happening in app), so pause task snapshot persisting to not increase the // load. mService.mTaskSnapshotController.setPersisterPaused(true); Trace.asyncTraceBegin(Trace.TRACE_TAG_WINDOW_MANAGER, &quot;animating&quot;, 0); } if (!mAnimating &amp;&amp; mLastAnimating) { mWindowPlacerLocked.requestTraversal(); mService.mTaskSnapshotController.setPersisterPaused(false); Trace.asyncTraceEnd(Trace.TRACE_TAG_WINDOW_MANAGER, &quot;animating&quot;, 0); } mLastAnimating = mAnimating; if (mRemoveReplacedWindows) { mService.mRoot.removeReplacedWindows(); mRemoveReplacedWindows = false; } mService.stopUsingSavedSurfaceLocked(); mService.destroyPreservedSurfaceLocked(); mService.mWindowPlacerLocked.destroyPendingSurfaces(); if (DEBUG_WINDOW_TRACE) { Slog.i(TAG, &quot;!!! animate: exit mAnimating=&quot; + mAnimating + &quot; mBulkUpdateParams=&quot; + Integer.toHexString(mBulkUpdateParams) + &quot; mPendingLayoutChanges(DEFAULT_DISPLAY)=&quot; + Integer.toHexString(getPendingLayoutChanges(DEFAULT_DISPLAY))); } } } Thread [android.anim] (Suspended (breakpoint at line 435 in WindowAnimator)) owns: WindowHashMap (id=1203) WindowAnimator.setAnimating(boolean) line: 435 private final Consumer&lt;WindowState&gt; mUpdateWallpaperForAnimator = w -&gt; { //这是一个回调函数 ,所有的window都会执行这个函数forallwindows final WindowStateAnimator winAnimator = w.mWinAnimator; if (winAnimator.mSurfaceController == null || !winAnimator.hasSurface()) { return; } final int flags = w.mAttrs.flags; // If this window is animating, make a note that we have an animating window and take // care of a request to run a detached wallpaper animation. if (winAnimator.mAnimating) { //这个条件决定是否把mAnimating置为true,如果置为true之后,就不会cancelAnimation(),animate 下一次还会执行 if (winAnimator.mAnimation != null) { if ((flags &amp; FLAG_SHOW_WALLPAPER) != 0 &amp;&amp; winAnimator.mAnimation.getDetachWallpaper()) { mTmpWindow = w; } final int color = winAnimator.mAnimation.getBackgroundColor(); if (color != 0) { final TaskStack stack = w.getStack(); if (stack != null) { stack.setAnimationBackground(winAnimator, color); } } } mTmpWindowAnimator.setAnimating(true); } DisplayContent.lambda$-com_android_server_wm_DisplayContent_18415(WindowState) line: 408 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$4(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWallpaperForAnimator(WindowAnimator) line: 2628 WindowAnimator.animate(long) line: 202 dc.updateWallpaperForAnimator(this); WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 下面的这个调用堆栈,把winAnimator.mAnimating 置为了true Thread [android.anim] (Suspended (breakpoint at line 423 in WindowStateAnimator)) owns: WindowHashMap (id=1203) WindowStateAnimator.stepAnimationLocked(long) line: 423 DisplayContent.lambda$-com_android_server_wm_DisplayContent_16102(WindowState) line: 339 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$3(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWindowsForAnimator(WindowAnimator) line: 2618 WindowAnimator.animate(long) line: 201 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 这里Thread [android.anim] (Suspended (breakpoint at line 395 in AppWindowAnimator)) owns: WindowHashMap (id=1203) AppWindowAnimator.stepAnimationLocked(long) line: 395 mAppAnimator.animating = true;这里也会设置为true @Override void stepAppWindowsAnimation(long currentTime) { mAppAnimator.wasAnimating = mAppAnimator.animating; if (mAppAnimator.stepAnimationLocked(currentTime)) { mAppAnimator.animating = true; //这里设置为true mService.mAnimator.setAnimating(true); mService.mAnimator.mAppWindowAnimating = true; } else if (mAppAnimator.wasAnimating) { // stopped animating, do one more pass through the layout setAppLayoutChanges(FINISH_LAYOUT_REDO_WALLPAPER, DEBUG_LAYOUT_REPEATS ? &quot;appToken &quot; + this + &quot; done&quot; : null); if (DEBUG_ANIM) Slog.v(TAG, &quot;updateWindowsApps...: done animating &quot; + this); } } AppWindowToken.stepAppWindowsAnimation(long) line: 1523 Task(WindowContainer).stepAppWindowsAnimation(long) line: 511 TaskStack(WindowContainer).stepAppWindowsAnimation(long) line: 511 TaskStack.stepAppWindowsAnimation(long) line: 1628 DisplayContent$TaskStackContainers(WindowContainer).stepAppWindowsAnimation(long) line: 511 DisplayContent(WindowContainer).stepAppWindowsAnimation(long) line: 511 WindowAnimator.animate(long) line: 174 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [android.anim] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=1203) AlphaAnimation(Animation).reset() line: 291 public boolean getTransformation(long currentTime, Transformation outTransformation) { if (mStartTime == -1) { mStartTime = currentTime; } final long startOffset = getStartOffset(); final long duration = mDuration; float normalizedTime; if (duration != 0) { normalizedTime = ((float) (currentTime - (mStartTime + startOffset))) / (float) duration; } else { // time is a step-change with a zero duration normalizedTime = currentTime &lt; mStartTime ? 0.0f : 1.0f; } final boolean expired = normalizedTime &gt;= 1.0f || isCanceled(); mMore = !expired; if (!mFillEnabled) normalizedTime = Math.max(Math.min(normalizedTime, 1.0f), 0.0f); if ((normalizedTime &gt;= 0.0f || mFillBefore) &amp;&amp; (normalizedTime &lt;= 1.0f || mFillAfter)) { if (!mStarted) { fireAnimationStart(); mStarted = true; if (NoImagePreloadHolder.USE_CLOSEGUARD) { guard.open(&quot;cancel or detach or getTransformation&quot;); } } if (mFillEnabled) normalizedTime = Math.max(Math.min(normalizedTime, 1.0f), 0.0f); if (mCycleFlip) { normalizedTime = 1.0f - normalizedTime; } final float interpolatedTime = mInterpolator.getInterpolation(normalizedTime); applyTransformation(interpolatedTime, outTransformation); } if (expired) { if (mRepeatCount == mRepeated || isCanceled()) { if (!mEnded) { mEnded = true; guard.close(); fireAnimationEnd(); } } else { if (mRepeatCount &gt; 0) { mRepeated++; } if (mRepeatMode == REVERSE) { mCycleFlip = !mCycleFlip; } mStartTime = -1; mMore = true; fireAnimationRepeat(); } } if (!mMore &amp;&amp; mOneMoreTime) { //这个mOneMoreTime被置为了 true mOneMoreTime = false; return true; } return mMore; } AlphaAnimation(Animation).initialize(int, int, int, int) line: 354 WindowStateAnimator.stepAnimationLocked(long) line: 391 DisplayContent.lambda$-com_android_server_wm_DisplayContent_16102(WindowState) line: 339 -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.$m$3(Object) line: not available -$Lambda$YIZfR4m-B8z_tYbP2x4OJ3o7OYE.accept(Object) line: not available WindowContainer$ForAllWindowsConsumerWrapper.apply(WindowState) line: 779 WindowContainer$ForAllWindowsConsumerWrapper.apply(Object) line: 777 WindowState.applyInOrderWithImeWindows(ToBooleanFunction, boolean) line: 4128 WindowState.forAllWindows(ToBooleanFunction, boolean) line: 4035 AppWindowToken(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 AppWindowToken.forAllWindowsUnchecked(ToBooleanFunction, boolean) line: 1549 AppWindowToken.forAllWindows(ToBooleanFunction, boolean) line: 1544 Task(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 TaskStack(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers(WindowContainer).forAllWindows(ToBooleanFunction, boolean) line: 616 DisplayContent$TaskStackContainers.forAllWindows(ToBooleanFunction, boolean) line: 3405 DisplayContent.forAllWindows(ToBooleanFunction, boolean) line: 1534 DisplayContent(WindowContainer).forAllWindows(Consumer, boolean) line: 633 DisplayContent.updateWindowsForAnimator(WindowAnimator) line: 2618 WindowAnimator.animate(long) line: 201 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameHandler.handleMessage(Message) line: 881 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [Binder:835_7] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=11972) AlphaAnimation(Animation).reset() line: 291 AlphaAnimation(Animation).initialize(int, int, int, int) line: 354 AppWindowAnimator.setAnimation(Animation, int, int, int, int, boolean, int, int, int) line: 133 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2427 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleClosingApps(int, WindowManager$LayoutParams, boolean, WindowSurfacePlacer$LayerAndToken) line: 461 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 344 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 mLocalAnimating if ((!mLocalAnimating || mAnimationIsEntrance) &amp;&amp; mAppAnimator != null &amp;&amp; mAppAnimator.animation != null) { // When our app token is animating, we kind-of pretend like // we are as well. Note the mLocalAnimating mAnimationIsEntrance // part of this check means that we will only do this if // our window is not currently exiting, or it is not // locally animating itself. The idea being that one that // is exiting and doing a local animation should be removed // once that animation is done. mAnimating = true; //一直把mAnimating置为true mHasTransformation = true; mTransformation.clear(); return false; } if (mWin.isDrawnLw() &amp;&amp; mAnimation != null) { //这个判断的关键点是mAnimation mHasTransformation = true; mHasLocalTransformation = true; if (!mLocalAnimating) { if (DEBUG_ANIM) Slog.v( TAG, &quot;Starting animation in &quot; + this + &quot; @ &quot; + currentTime + &quot;: ww=&quot; + mWin.mFrame.width() + &quot; wh=&quot; + mWin.mFrame.height() + &quot; dx=&quot; + mAnimDx + &quot; dy=&quot; + mAnimDy + &quot; scale=&quot; + mService.getWindowAnimationScaleLocked()); final DisplayInfo displayInfo = displayContent.getDisplayInfo(); if (mAnimateMove) { mAnimateMove = false; mAnimation.initialize(mWin.mFrame.width(), mWin.mFrame.height(), mAnimDx, mAnimDy); } else { mAnimation.initialize(mWin.mFrame.width(), mWin.mFrame.height(), displayInfo.appWidth, displayInfo.appHeight); } mAnimDx = displayInfo.appWidth; mAnimDy = displayInfo.appHeight; mAnimation.setStartTime(mAnimationStartTime != -1 ? mAnimationStartTime : currentTime); mLocalAnimating = true; //这里会设置为true mAnimating = true; } Thread [android.anim] (Suspended (breakpoint at line 271 in WindowStateAnimator)) owns: WindowHashMap (id=11972) WindowStateAnimator.setAnimation(Animation, long, int) line: 271 public void setAnimation(Animation anim, long startTime, int stackClip) { if (localLOGV) Slog.v(TAG, “Setting animation in “ + this + “: “ + anim); mAnimating = false; mLocalAnimating = false; //这里会置为false mAnimation = anim; //并且赋值mAnimation mAnimation.restrictDuration(WindowManagerService.MAX_ANIMATION_DURATION); mAnimation.scaleCurrentDuration(mService.getWindowAnimationScaleLocked()); // Start out animation gone if window is gone, or visible if window is visible. mTransformation.clear(); mTransformation.setAlpha(mLastHidden ? 0 : 1); mHasLocalTransformation = true; mAnimationStartTime = startTime; mStackClip = stackClip; } WindowStateAnimator.setAnimation(Animation) line: 287 WindowStateAnimator.applyAnimationLocked(int, boolean) line: 1858 WindowState.removeIfPossible(boolean) line: 1946 WindowState.removeIfPossible() line: 1848 WindowManagerService.removeWindow(Session, IWindow) line: 1733 Session.remove(IWindow) line: 222 TaskSnapshotSurface.remove() line: 260 AppWindowContainerController.lambda$-com_android_server_wm_AppWindowContainerController_31045(WindowManagerPolicy$StartingSurface) line: 658 -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.$m$5() line: not available -$Lambda$aEpJ2RCAIjecjyIIYTv6ricEwh4.run() line: not available Handler.handleCallback(Message) line: 790 Handler.dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 Thread [Binder:835_1E] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=11972) owns: ActivityManagerService (id=12078) AnimationSet(Animation).reset() line: 291 AnimationSet.reset() line: 488 AnimationSet(Animation).initialize(int, int, int, int) line: 354 AnimationSet.initialize(int, int, int, int) line: 425 AppTransition.createClipRevealAnimationLocked(int, boolean, Rect, Rect) line: 867 AppTransition.loadAnimation(WindowManager$LayoutParams, int, boolean, int, int, Rect, Rect, Rect, Rect, Rect, boolean, boolean, int) line: 1563 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2420 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleOpeningApps(int, WindowManager$LayoutParams, boolean, int) line: 404 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 348 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 //其他进程调用 activityStoppedThread [Binder:835_19] (Suspended (breakpoint at line 615 in AppWindowContainerController)) owns: WindowHashMap (id=11972) owns: ActivityManagerService (id=12078) AppWindowContainerController.removeStartingWindow() line: 615 AppWindowToken.notifyAppStopped() line: 682 AppWindowContainerController.notifyAppStopped() line: 699 ActivityRecord.activityStoppedLocked(Bundle, PersistableBundle, CharSequence) line: 1820 ActivityManagerService.activityStopped(IBinder, Bundle, PersistableBundle, CharSequence) line: 7630 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 347 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 home键 Thread [InputDispatcher] (Suspended (breakpoint at line 615 in AppWindowContainerController)) owns: ActivityManagerService (id=12078) AppWindowContainerController.removeStartingWindow() line: 615 ActivityRecord.removeOrphanedStartingWindow(boolean) line: 2256 ActivityStack.cancelInitializingActivities() line: 2236 ActivityStackSupervisor.cancelInitializingActivities() line: 1112 ActivityStack.resumeTopActivityInnerLocked(ActivityRecord, ActivityOptions) line: 2316 ActivityStack.resumeTopActivityUncheckedLocked(ActivityRecord, ActivityOptions) line: 2267 ActivityStackSupervisor.resumeFocusedStackTopActivityLocked(ActivityStack, ActivityRecord, ActivityOptions) line: 2107 ActivityStackSupervisor.resumeFocusedStackTopActivityLocked() line: 2091 ActivityStack.moveTaskToFrontLocked(TaskRecord, boolean, ActivityOptions, AppTimeTracker, String) line: 4652 ActivityStarter.setTargetStackAndMoveToFrontIfNeeded(ActivityRecord) line: 1613 ActivityStarter.startActivityUnchecked(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1096 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1000 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ContextImpl.startActivityAsUser(Intent, Bundle, UserHandle) line: 887 ContextImpl.startActivityAsUser(Intent, UserHandle) line: 861 PhoneWindowManager.startActivityAsUser(Intent, UserHandle) line: 4157 PhoneWindowManager.startDockOrHome(boolean, boolean) line: 7833 PhoneWindowManager.launchHomeFromHotKey(boolean, boolean) line: 4281 PhoneWindowManager.launchHomeFromHotKey() line: 4233 PhoneWindowManager.handleShortPressOnHome() line: 1769 PhoneWindowManager.interceptKeyBeforeDispatching(WindowManagerPolicy$WindowState, KeyEvent, int) line: 3499 InputMonitor.interceptKeyBeforeDispatching(InputWindowHandle, KeyEvent, int) line: 466 InputManagerService.interceptKeyBeforeDispatching(InputWindowHandle, KeyEvent, int) line: 1983 Thread [Binder:835_1E] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=11972) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 Thread [android.anim] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=11972) WindowAnimator.scheduleAnimation() line: 407 WindowAnimator.animate(long) line: 143 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 堵在这里回不去 public boolean containsShowWhenLockedWindow(IBinder token) { synchronized (mWindowMap) { final AppWindowToken wtoken = mRoot.getAppWindowToken(token); return wtoken != null &amp;&amp; wtoken.containsShowWhenLockedWindow(); } } Thread [Binder:835_1F] (Suspended) owns: ActivityManagerService (id=12078) waiting for: WindowHashMap (id=11972) WindowManagerService.containsShowWhenLockedWindow(IBinder) line: 2975 ActivityRecord.canShowWhenLocked() line: 2881 ActivityStack.checkKeyguardVisibility(ActivityRecord, boolean, boolean) line: 1999 ActivityStack.ensureActivitiesVisibleLocked(ActivityRecord, int, boolean) line: 1862 ActivityStackSupervisor.ensureActivitiesVisibleLocked(ActivityRecord, int, boolean) line: 3430 ActivityStack.completePauseLocked(boolean, ActivityRecord) line: 1543 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1425 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 现在怀疑是android.anim线程一直占着锁,然后,其他进程的activityPausedLocked线程退不出去 Thread [Binder:835_1E] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=11972) owns: ActivityManagerService (id=12078) AnimationSet(Animation).reset() line: 291 //reset 是这里走的 可以置条件 AnimationSet.reset() line: 488 AnimationSet(Animation).initialize(int, int, int, int) line: 354 AnimationSet.initialize(int, int, int, int) line: 425 AppTransition.createClipRevealAnimationLocked(int, boolean, Rect, Rect) line: 867 AppTransition.loadAnimation(WindowManager$LayoutParams, int, boolean, int, int, Rect, Rect, Rect, Rect, Rect, boolean, boolean, int) line: 1563 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2420 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleOpeningApps(int, WindowManager$LayoutParams, boolean, int) line: 404 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 348 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 明天可以通过线程的LOG来跟踪 Thread [Binder:835_17] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=11972) owns: ActivityManagerService (id=12078) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStarter.startActivity(ActivityRecord, ActivityRecord, IVoiceInteractionSession, IVoiceInteractor, int, boolean, ActivityOptions, TaskRecord, ActivityRecord[]) line: 1010 ActivityStarter.startActivity(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord) line: 577 ActivityStarter.startActivityLocked(IApplicationThread, Intent, Intent, String, ActivityInfo, ResolveInfo, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, int, String, int, int, int, ActivityOptions, boolean, boolean, ActivityRecord[], TaskRecord, String) line: 283 ActivityStarter.startActivityMayWait(IApplicationThread, int, String, Intent, String, IVoiceInteractionSession, IVoiceInteractor, IBinder, String, int, int, ProfilerInfo, WaitResult, Configuration, Bundle, boolean, int, TaskRecord, String) line: 822 ActivityManagerService.startActivityAsUser(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle, int) line: 4622 ActivityManagerService.startActivity(IApplicationThread, String, Intent, String, IBinder, String, int, int, ProfilerInfo, Bundle) line: 4609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 121 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 这里重新调用一下, scheduleAnimationThread [Binder:835_13] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=11972) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 —– pid 13471 at 2018-06-29 09:52:55 —–Cmd line: com.android.dialerBuild fingerprint: ‘ATT/QS5509QL/QS5509QL:8.1.0/OPM1.171019.026/v1A6L-0:userdebug/test-keys’ABI: ‘arm’Build type: optimizedZygote loaded classes=5032 post zygote classes=907“main” prio=5 tid=1 Native | group=”main” sCount=1 dsCount=0 flags=1 obj=0x70bb97f0 self=0xa5ca4000 | sysTid=13471 nice=-10 cgrp=default sched=0/0 handle=0xa9d944a4 | state=S schedstat=( 5295191541 1911600014 4283 ) utm=416 stm=113 core=3 HZ=100 | stack=0xbe3bc000-0xbe3be000 stackSize=8MB | held mutexes= native: #00 pc 00049794 /system/lib/libc.so (ioctl+8) native: #01 pc 0001e233 /system/lib/libc.so (ioctl+38) native: #02 pc 0004242f /system/lib/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+170) native: #03 pc 00042de9 /system/lib/libbinder.so (android::IPCThreadState::waitForResponse(android::Parcel, int)+236) native: #04 pc 0003d2e5 /system/lib/libbinder.so (android::BpBinder::transact(unsigned int, android::Parcel const&amp;, android::Parcel*, unsigned int)+36) native: #05 pc 000bd409 /system/lib/libandroid_runtime.so (???) native: #06 pc 0064e485 /data/dalvik-cache/arm/system@framework@boot.oat (Java_android_os_BinderProxy_transactNativeILandroid_os_Parcel_2Landroid_os_Parcel_2I+132) at android.os.BinderProxy.transactNative(Native method) at android.os.BinderProxy.transact(Binder.java:764) at android.view.IWindowSession$Stub$Proxy.relayout(IWindowSession.java:915) at android.view.ViewRootImpl.relayoutWindow(ViewRootImpl.java:6141) at android.view.ViewRootImpl.performTraversals(ViewRootImpl.java:1905) at android.view.ViewRootImpl.doTraversal(ViewRootImpl.java:1396) at android.view.ViewRootImpl$TraversalRunnable.run(ViewRootImpl.java:6773) at android.view.Choreographer$CallbackRecord.run(Choreographer.java:966) at android.view.Choreographer.doCallbacks(Choreographer.java:778) at android.view.Choreographer.doFrame(Choreographer.java:713) at android.view.Choreographer$FrameDisplayEventReceiver.run(Choreographer.java:952) at android.os.Handler.handleCallback(Handler.java:790) at android.os.Handler.dispatchMessage(Handler.java:99) at android.os.Looper.loop(Looper.java:164) at android.app.ActivityThread.main(ActivityThread.java:6518) at java.lang.reflect.Method.invoke(Native method) at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807) 这里也会block? Thread [Binder:835_13] (Suspended) waiting for: ActivityManagerService (id=12078) ActivityManagerService.getActivityOptions(IBinder) line: 13588 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 2906 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 “main” prio=5 tid=1 Native | group=”main” sCount=1 dsCount=0 flags=1 obj=0x70bb97f0 self=0xa5ca4000 | sysTid=13471 nice=-10 cgrp=default sched=0/0 handle=0xa9d944a4 | state=S schedstat=( 5312166227 1913354234 4311 ) utm=416 stm=115 core=1 HZ=100 | stack=0xbe3bc000-0xbe3be000 stackSize=8MB | held mutexes= native: #00 pc 00049794 /system/lib/libc.so (ioctl+8) native: #01 pc 0001e233 /system/lib/libc.so (ioctl+38) native: #02 pc 0004242f /system/lib/libbinder.so (android::IPCThreadState::talkWithDriver(bool)+170) native: #03 pc 00042de9 /system/lib/libbinder.so (android::IPCThreadState::waitForResponse(android::Parcel, int)+236) native: #04 pc 0003d2e5 /system/lib/libbinder.so (android::BpBinder::transact(unsigned int, android::Parcel const&amp;, android::Parcel*, unsigned int)+36) native: #05 pc 000bd409 /system/lib/libandroid_runtime.so (???) native: #06 pc 0064e485 /data/dalvik-cache/arm/system@framework@boot.oat (Java_android_os_BinderProxy_transactNativeILandroid_os_Parcel_2Landroid_os_Parcel_2I+132) at android.os.BinderProxy.transactNative(Native method) at android.os.BinderProxy.transact(Binder.java:764) at android.app.IActivityManager$Stub$Proxy.getActivityOptions(IActivityManager.java:8278) at android.app.Activity.getActivityOptions(Activity.java:6431) at android.app.Activity.performStart(Activity.java:7044) at android.app.Activity.performRestart(Activity.java:7123) at android.app.Activity.performResume(Activity.java:7128) at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3559) at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3624) at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1641) at android.os.Handler.dispatchMessage(Handler.java:106) at android.os.Looper.loop(Looper.java:164) at android.app.ActivityThread.main(ActivityThread.java:6518) at java.lang.reflect.Method.invoke(Native method) at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438) at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807) 超时调用 Thread [ActivityManager] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=11972) owns: ActivityManagerService (id=12078) AnimationSet(Animation).reset() line: 291 AnimationSet.reset() line: 488 AnimationSet(Animation).initialize(int, int, int, int) line: 354 AnimationSet.initialize(int, int, int, int) line: 425 AppTransition.createClipRevealAnimationLocked(int, boolean, Rect, Rect) line: 867 AppTransition.loadAnimation(WindowManager$LayoutParams, int, boolean, int, int, Rect, Rect, Rect, Rect, Rect, boolean, boolean, int) line: 1563 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2420 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleOpeningApps(int, WindowManager$LayoutParams, boolean, int) line: 404 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 348 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityStack$ActivityStackHandler.handleMessage(Message) line: 401 ActivityStack$ActivityStackHandler(Handler).dispatchMessage(Message) line: 106 Looper.loop() line: 164 ServiceThread(HandlerThread).run() line: 65 ServiceThread.run() line: 46 Thread [Binder:835_1B] (Suspended (breakpoint at line 1429 in ActivityStack)) owns: ActivityManagerService (id=23700) ActivityStack.activityPausedLocked(IBinder, boolean) line: 1429 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 Thread [Binder:835_1B] (Suspended (breakpoint at line 615 in AppWindowContainerController)) owns: WindowHashMap (id=23648) owns: ActivityManagerService (id=23700) AppWindowContainerController.removeStartingWindow() line: 615 AppWindowToken.notifyAppStopped() line: 682 AppWindowContainerController.notifyAppStopped() line: 699 ActivityRecord.activityStoppedLocked(Bundle, PersistableBundle, CharSequence) line: 1820 ActivityManagerService.activityStopped(IBinder, Bundle, PersistableBundle, CharSequence) line: 7630 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 347 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 APP activityStopped时,才会走removeStartingWindow public void removeStartingWindow() { synchronized (mWindowMap) {//jackywei 这里会有block的问题 if (mContainer.startingWindow == null) { if (mContainer.startingData != null) { // Starting window has not been added yet, but it is scheduled to be added. // Go ahead and cancel the request. if (DEBUG_STARTING_WINDOW) Slog.v(TAG_WM, &quot;Clearing startingData for token=&quot; + mContainer); mContainer.startingData = null; } return; } animation = null; Thread [android.anim] (Suspended (breakpoint at line 179 in AppWindowAnimator)) owns: WindowHashMap (id=23648) AppWindowAnimator.setNullAnimation() line: 179 AppWindowAnimator.clearAnimation() line: 188 AppWindowAnimator.stepAnimationLocked(long) line: 413 AppWindowToken.stepAppWindowsAnimation(long) line: 1523 Task(WindowContainer).stepAppWindowsAnimation(long) line: 511 TaskStack(WindowContainer).stepAppWindowsAnimation(long) line: 511 TaskStack.stepAppWindowsAnimation(long) line: 1628 DisplayContent$TaskStackContainers(WindowContainer).stepAppWindowsAnimation(long) line: 511 DisplayContent(WindowContainer).stepAppWindowsAnimation(long) line: 511 WindowAnimator.animate(long) line: 174 WindowAnimator.lambda$-com_android_server_wm_WindowAnimator_3951(long) line: 105 -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.$m$0(long) line: not available -$Lambda$OQfQhd_xsxt9hoLAjIbVfOwa-jY.doFrame(long) line: not available Choreographer$CallbackRecord.run(long) line: 964 Choreographer.doCallbacks(int, long) line: 778 Choreographer.doFrame(long, int) line: 710 Choreographer$FrameDisplayEventReceiver.run() line: 952 Handler.handleCallback(Message) line: 790 Choreographer$FrameHandler(Handler).dispatchMessage(Message) line: 99 Looper.loop() line: 164 AnimationThread(HandlerThread).run() line: 65 AnimationThread(ServiceThread).run() line: 46 启动 scheduleAnimationThread [Binder:835_1A] (Suspended (breakpoint at line 407 in WindowAnimator)) owns: WindowHashMap (id=23648) WindowAnimator.scheduleAnimation() line: 407 WindowManagerService.scheduleAnimationLocked() line: 5988 RootWindowContainer.performSurfacePlacement(boolean) line: 824 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowManagerService.relayoutWindow(Session, IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 2182 Session.relayout(IWindow, int, WindowManager$LayoutParams, int, int, int, int, Rect, Rect, Rect, Rect, Rect, Rect, Rect, MergedConfiguration, Surface) line: 239 Session(IWindowSession$Stub).onTransact(int, Parcel, Parcel, int) line: 286 Session.onTransact(int, Parcel, Parcel, int) line: 163 Session(Binder).execTransact(int, long, long, int) line: 697 把animation = null;//jackywei设置为NULLThread [Binder:835_1C] (Suspended (breakpoint at line 179 in AppWindowAnimator)) owns: WindowHashMap (id=23648) owns: ActivityManagerService (id=23700) AppWindowAnimator.setNullAnimation() line: 179 WindowSurfacePlacer.handleClosingApps(int, WindowManager$LayoutParams, boolean, WindowSurfacePlacer$LayerAndToken) line: 458 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 344 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 设置animating = false;Thread [Binder:835_1C] (Suspended (breakpoint at line 131 in AppWindowAnimator)) owns: WindowHashMap (id=23648) owns: ActivityManagerService (id=23700) AppWindowAnimator.setAnimation(Animation, int, int, int, int, boolean, int, int, int) line: 131 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2427 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleClosingApps(int, WindowManager$LayoutParams, boolean, WindowSurfacePlacer$LayerAndToken) line: 461 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 344 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 设置 mMore = true; mOneMoreTime = true; Thread [Binder:835_1C] (Suspended (breakpoint at line 291 in Animation)) owns: WindowHashMap (id=23648) owns: ActivityManagerService (id=23700) AlphaAnimation(Animation).reset() line: 291 AlphaAnimation(Animation).initialize(int, int, int, int) line: 354 AppWindowAnimator.setAnimation(Animation, int, int, int, int, boolean, int, int, int) line: 133 WindowManagerService.applyAnimationLocked(AppWindowToken, WindowManager$LayoutParams, int, boolean, boolean) line: 2427 AppWindowToken.setVisibility(WindowManager$LayoutParams, boolean, int, boolean, boolean) line: 372 WindowSurfacePlacer.handleClosingApps(int, WindowManager$LayoutParams, boolean, WindowSurfacePlacer$LayerAndToken) line: 461 WindowSurfacePlacer.handleAppTransitionReadyLocked() line: 344 RootWindowContainer.performSurfacePlacement(boolean) line: 615 WindowSurfacePlacer.performSurfacePlacementLoop() line: 197 WindowSurfacePlacer.performSurfacePlacement(boolean) line: 145 WindowSurfacePlacer.performSurfacePlacement() line: 135 WindowSurfacePlacer.continueLayout() line: 126 WindowManagerService.continueSurfaceLayout() line: 2966 ActivityStack.activityPausedLocked(IBinder, boolean) line: 1427 ActivityManagerService.activityPaused(IBinder) line: 7609 ActivityManagerService(IActivityManager$Stub).onTransact(int, Parcel, Parcel, int) line: 317 ActivityManagerService.onTransact(int, Parcel, Parcel, int) line: 2977 ActivityManagerService(Binder).execTransact(int, long, long, int) line: 697 7月7日,问题 again.","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"慢的问题2","slug":"BUG解析/慢的问题2","date":"2018-12-13T07:53:48.693Z","updated":"2018-12-13T07:52:23.593Z","comments":true,"path":"2018/12/13/bug-jie-xi/man-de-wen-ti-2/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/man-de-wen-ti-2/","excerpt":"","text":"01-03 03:16:38.955 842 2369 I am_new_intent: [0,252403316,63,com.android.launcher3/.Launcher,android.intent.action.MAIN,NULL,NULL,268435712]01-03 03:16:39.025 842 2369 I am_focused_stack: [0,0,1,bringingFoundTaskToFront]01-03 03:16:39.113 842 2369 I am_pause_activity: [0,14608435,com.android.settings/.SubSettings]01-03 03:16:39.280 842 2369 I am_set_resumed_activity: [0,com.android.launcher3/.Launcher,resumeTopActivityInnerLocked]01-03 03:16:39.370 842 2369 I am_uid_active: 1002501-03 03:16:40.337 842 2369 I am_resume_activity: [0,252403316,63,com.android.launcher3/.Launcher]01-03 03:16:57.203 842 2369 I am_task_to_front: [0,63]01-03 03:16:58.674 842 951 I am_stop_activity: [0,14608435,com.android.settings/.SubSettings]01-03 03:16:58.739 12737 12737 I am_on_paused_called: [0,com.android.settings.SubSettings,handlePauseActivity]01-03 03:16:58.751 842 5734 I am_failed_to_pause: [0,14608435,com.android.settings/.SubSettings,(none)]01-03 03:17:11.507 12737 12737 I am_on_stop_called: [0,com.android.settings.SubSettings,handleStopActivity]01-03 03:17:11.541 3973 3973 I am_on_resume_called: [0,com.android.launcher3.Launcher,RESUME_ACTIVITY]01-03 03:17:12.350 842 950 I am_pss : [3973,10025,com.android.launcher3,26974208,16146432,8455168]01-03 03:17:15.915 842 950 I am_pss : [18493,10031,com.google.android.setupwizard,6391808,3411968,1949696]01-03 03:17:16.057 842 950 I am_pss : [8314,10017,com.google.android.apps.nbu.files,38444032,20512768,13848576] 01-01 18:18:20.729 842 4423 W jackywei: ======== removeTask ========01-01 18:18:20.729 842 4423 W jackywei: java.lang.Throwable01-01 18:18:20.729 842 4423 W jackywei: at com.android.server.am.ActivityStack.removeTask(ActivityStack.java:5221)01-01 18:18:20.729 842 4423 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4217)01-01 18:18:20.729 842 4423 W jackywei: at com.android.server.am.ActivityStack.activityDestroyedLocked(ActivityStack.java:4446)01-01 18:18:20.729 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.activityDestroyed(ActivityManagerService.java:7646)01-01 18:18:20.729 842 4423 W jackywei: at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:960)01-01 18:18:20.729 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2978)01-01 18:18:20.729 842 4423 W jackywei: at android.os.Binder.execTransact(Binder.java:697) 01-01 18:19:30.787 842 4423 W jackywei: ======== removeTask ========01-01 18:19:30.789 842 4423 W jackywei: java.lang.Throwable01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityStack.removeTask(ActivityStack.java:5221)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityStack.removeActivityFromHistoryLocked(ActivityStack.java:4217)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityStack.removeHistoryRecordsForAppLocked(ActivityStack.java:4554)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityStack.handleAppDiedLocked(ActivityStack.java:5105)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityStackSupervisor.handleAppDiedLocked(ActivityStackSupervisor.java:2008)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.handleAppDiedLocked(ActivityManagerService.java:5414)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.appDiedLocked(ActivityManagerService.java:5595)01-01 18:19:30.789 842 4423 W jackywei: at com.android.server.am.ActivityManagerService$AppDeathRecipient.binderDied(ActivityManagerService.java:1642)01-01 18:19:30.789 842 4423 W jackywei: at android.os.BinderProxy.sendDeathNotice(Binder.java:844) 01-01 18:46:11.088 842 4423 W jackywei: ======== createTaskRecord ========01-01 18:46:11.088 842 2236 V WindowManager: Window{b40586f u0 com.google.android.apps.photos/com.google.android.apps.photos.pager.HostPhotoPagerActivity}: wasAnimating=false, nowAnimating=false01-01 18:46:11.089 842 4423 W jackywei: java.lang.Throwable01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStack.createTaskRecord(ActivityStack.java:5280)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.setTaskFromReuseOrCreateNewTask(ActivityStarter.java:1799)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.startActivityUnchecked(ActivityStarter.java:1188)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.startActivity(ActivityStarter.java:1000)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.startActivity(ActivityStarter.java:577)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.startActivityLocked(ActivityStarter.java:283)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityStarter.startActivityMayWait(ActivityStarter.java:822)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.startActivityAsUser(ActivityManagerService.java:4623)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.startActivity(ActivityManagerService.java:4610)01-01 18:46:11.089 842 4423 W jackywei: at android.app.IActivityManager$Stub.onTransact(IActivityManager.java:121)01-01 18:46:11.089 842 4423 W jackywei: at com.android.server.am.ActivityManagerService.onTransact(ActivityManagerService.java:2978)01-01 18:46:11.089 842 4423 W jackywei: at android.os.Binder.execTransact(Binder.java:697) 7594 @Override7595 public final void activityResumed(IBinder token) {7596 final long origId = Binder.clearCallingIdentity();7597 synchronized(this) {7598 ActivityRecord.activityResumedLocked(token);7599 mWindowManager.notifyAppResumedFinished(token);7600 }7601 Binder.restoreCallingIdentity(origId);7602 } 1720 static void activityResumedLocked(IBinder token) {1721 final ActivityRecord r = ActivityRecord.forTokenLocked(token);1722 if (DEBUG_SAVED_STATE) Slog.i(TAG_STATES, “Resumed activity; dropping state of: “ + r);1723 if (r != null) {1724 r.icicle = null;1725 r.haveState = false;1726 }1727 }1728 只有 activityResumedLocked 才会导致 r.haveState 置成false. 而haveState存在的话,就不会remove = true; 也就不会 if (remove) { removeActivityFromHistoryLocked(r, “appDied”); } 827 ActivityRecord(ActivityManagerService _service, ProcessRecord _caller, int _launchedFromPid,828 int _launchedFromUid, String _launchedFromPackage, Intent _intent, String _resolvedType,829 ActivityInfo aInfo, Configuration _configuration,830 ActivityRecord _resultTo, String _resultWho, int _reqCode,831 boolean _componentSpecified, boolean _rootVoiceInteraction,832 ActivityStackSupervisor supervisor, ActivityOptions options,833 ActivityRecord sourceRecord) {834 service = _service;835 appToken = new Token(this);836 info = aInfo;837 launchedFromPid = _launchedFromPid;838 launchedFromUid = _launchedFromUid;839 launchedFromPackage = _launchedFromPackage;840 userId = UserHandle.getUserId(aInfo.applicationInfo.uid);841 intent = _intent;842 shortComponentName = _intent.getComponent().flattenToShortString();843 resolvedType = _resolvedType;844 componentSpecified = _componentSpecified;845 rootVoiceInteraction = _rootVoiceInteraction;846 mLastReportedConfiguration = new MergedConfiguration(_configuration);847 resultTo = _resultTo;848 resultWho = _resultWho;849 requestCode = _reqCode;850 state = INITIALIZING;851 frontOfTask = false;852 launchFailed = false;853 stopped = false;854 delayedResume = false;855 finishing = false;856 deferRelaunchUntilPaused = false;857 keysPaused = false;858 inHistory = false;859 visible = false;860 nowVisible = false;861 idle = false;862 hasBeenLaunched = false;863 mStackSupervisor = supervisor;864865 mRotationAnimationHint = aInfo.rotationAnimation;866867 if (options != null) {868 pendingOptions = options;869 mLaunchTaskBehind = pendingOptions.getLaunchTaskBehind();870871 final int rotationAnimation = pendingOptions.getRotationAnimationHint();872 // Only override manifest supplied option if set.873 if (rotationAnimation &gt;= 0) {874 mRotationAnimationHint = rotationAnimation;875 }876 PendingIntent usageReport = pendingOptions.getUsageTimeReport();877 if (usageReport != null) {878 appTimeTracker = new AppTimeTracker(usageReport);879 }880 }881882 // This starts out true, since the initial state of an activity is that we have everything,883 // and we shouldn’t never consider it lacking in state to be removed if it dies.884 haveState = true; //这里就直接会置为true885886 // If the class name in the intent doesn’t match that of the target, this is887 // probably an alias. We have to create a new ComponentName object to keep track888 // of the real activity name, so that FLAG_ACTIVITY_CLEAR_TOP is handled properly. void notifyTaskPersisterLocked(TaskRecord task, boolean flush) { final ActivityStack stack = task != null ? task.getStack() : null; if (stack != null &amp;&amp; stack.isHomeOrRecentsStack()) { // Never persist the home or recents stack. return; } syncPersistentTaskIdsLocked(); mTaskPersister.wakeup(task, flush); } for i in {1..10000};do adb shell input tap 201 109 &amp;&amp; adb shell input keyevent 3 &amp;&amp; adb shell input tap 201 109 &amp;&amp; adb shell input tap 432 508 &amp;&amp; adb shell input tap 406 812 &amp;&amp; adb shell input tap 31 80 &amp;&amp; adb shell input keyevent 3;done","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"Fota升级之后无法开机","slug":"BUG解析/Fota升级开不机","date":"2018-12-13T07:53:44.125Z","updated":"2018-12-13T07:52:35.193Z","comments":true,"path":"2018/12/13/bug-jie-xi/fota-sheng-ji-kai-bu-ji/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/fota-sheng-ji-kai-bu-ji/","excerpt":"","text":"Fota升级之后无法开机分析Crash的地方: 08-03 10:42:29.051 723 723 E AndroidRuntime: *** FATAL EXCEPTION IN SYSTEM PROCESS: main08-03 10:42:29.051 723 723 E AndroidRuntime: java.lang.NullPointerException: Attempt to read from field &apos;java.lang.String com.android.server.pm.PackageSettingBase.name&apos; on a null object reference08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.scanPackageInternalLI(PackageManagerService.java:9710)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.scanPackageLI(PackageManagerService.java:9451)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.scanDirLI(PackageManagerService.java:9265)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.scanDirTracedLI(PackageManagerService.java:9212)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.&lt;init&gt;(PackageManagerService.java:2656)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.pm.PackageManagerService.main(PackageManagerService.java:2338)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.SystemServer.startBootstrapServices(SystemServer.java:601)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.SystemServer.run(SystemServer.java:399)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.server.SystemServer.main(SystemServer.java:277)08-03 10:42:29.051 723 723 E AndroidRuntime: at java.lang.reflect.Method.invoke(Native Method)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)08-03 10:42:29.051 723 723 E AndroidRuntime: at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:787)08-03 10:42:29.053 723 723 E AndroidRuntime: Error reporting crash08-03 10:42:29.053 723 723 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke interface method &apos;void android.app.IActivityManager.handleApplicationCrash(android.os.IBinder, android.app.ApplicationErrorReport$ParcelableCrashInfo)&apos; on a null object reference08-03 10:42:29.053 723 723 E AndroidRuntime: at com.android.internal.os.RuntimeInit$KillApplicationHandler.uncaughtException(RuntimeInit.java:116)08-03 10:42:29.053 723 723 E AndroidRuntime: at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:1068)08-03 10:42:29.053 723 723 E AndroidRuntime: at java.lang.ThreadGroup.uncaughtException(ThreadGroup.java:1063)08-03 10:42:29.053 723 723 E AndroidRuntime: at java.lang.Thread.dispatchUncaughtException(Thread.java:1955) 直接原因是ps空指针造成的. 发现是如下两个地方都返回了空. if (pkg.mOriginalPackages != null &amp;&amp; pkg.mOriginalPackages.contains(oldName)) &#123; // This package has been renamed to its original name. Let&apos;s // use that. ps = mSettings.getPackageLPr(oldName);&#125;// If there was no original package, see one for the real package name.if (ps == null) &#123; ps = mSettings.getPackageLPr(pkg.packageName);&#125; 查看代码发现,mSettings 是PMS初始化的时候一起初始化的，并且会维护所有包的信息,读写文件: public PackageManagerService(Context context, Installer installer, boolean factoryTest, boolean onlyCore) &#123; LockGuard.installLock(mPackages, LockGuard.INDEX_PACKAGES); Trace.traceBegin(TRACE_TAG_PACKAGE_MANAGER, &quot;create package manager&quot;); EventLog.writeEvent(EventLogTags.BOOT_PROGRESS_PMS_START, SystemClock.uptimeMillis()); if (mSdkVersion &lt;= 0) &#123; Slog.w(TAG, &quot;**** ro.build.version.sdk not set!&quot;); &#125; mContext = context; mPermissionReviewRequired = context.getResources().getBoolean( R.bool.config_permissionReviewRequired); mFactoryTest = factoryTest; mOnlyCore = onlyCore; /* niuwenchao modify 20180104 for 8909go preloadapp start */ mPreInstallDir = new File(&quot;/system/preloadapp&quot;); /* niuwenchao modify 20180104 for 8909go preloadapp end */ mMetrics = new DisplayMetrics(); mSettings = new Settings(mPackages); mSettings.addSharedUserLPw(&quot;android.uid.system&quot;, Process.SYSTEM_UID, ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED); mSettings.addSharedUserLPw(&quot;android.uid.phone&quot;, RADIO_UID, ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED); mSettings.addSharedUserLPw(&quot;android.uid.log&quot;, LOG_UID, ApplicationInfo.FLAG_SYSTEM, ApplicationInfo.PRIVATE_FLAG_PRIVILEGED); PS: 不排除是&quot;niuwenchao&quot; 修改,或者是suyibang最近打的security patch引起的.(没有回退代码做压力测试,此问题也比较难复现)。 下面是自己加的LOG 05-31 02:05:29.416 3563 3563 W PackageSettings: mSystemDir/data/system, mSettingsFilename = /data/system/packages.xml,mBackupSettingsFilename = /data/system/packages-backup.xml,mPackageListFilename = /data/system/packages.list,mKernelMappingFilename =/config/sdcardfs,mStoppedPackagesFilename = /data/system/packages-stopped.xml,mBackupStoppedPackagesFilename = /data/system/packages-stopped-backup.xml 下载相应的PMS Settings使用的文件 adb pull /data/system/packages.xmladb pull /data/system/packages-backup.xmladb pull /data/system/packages-stopped.xmladb pull /data/system/packages-stopped-backup.xmladb pull /data/system/packages.list 在 packages.xml 文件中,只有升级记录: &lt;updated-package name=&quot;com.google.android.gms&quot; codePath=&quot;/system/priv-app/GmsCore&quot; ft=&quot;1636e1ba6c0&quot; it=&quot;1636e1ba6c0&quot; ut=&quot;1636e1ba6c0&quot; version=&quot;12529018&quot; nativeLibraryPath=&quot;/system/priv-app/GmsCore/lib&quot; primaryCpuAbi=&quot;armeabi-v7a&quot; sharedUserId=&quot;10019&quot; /&gt; 没有正常的，如下面的这种已经安装的记录: &lt;package name=&quot;com.android.providers.downloads.ui&quot; codePath=&quot;/system/app/DownloadProviderUi&quot; nativeLibraryPath=&quot;/system/app/DownloadProviderUi/lib&quot; publicFlags=&quot;944291397&quot; privateFlags=&quot;0&quot; ft=&quot;1648fe85388&quot; it=&quot;1636e1b9ef0&quot; ut=&quot;1648fe85388&quot; version=&quot;27&quot; sharedUserId=&quot;10013&quot; isOrphaned=&quot;true&quot;&gt; /data/system/packages.xml 里面没有GMS的相关节点.这里原因未知，可以暂时假设是某个流程没有走完，导致文件里面的内容未彻底修改完成. packages.xml 对应的是 mSettingsFilename 变量. 尝试不修改代码解决导出/data/system/packages.xml文件. 删除以下下内容:&lt;updated-package name=&quot;com.google.android.gms&quot; codePath=&quot;/system/priv-app/GmsCore&quot; ft=&quot;1636e1ba6c0&quot; it=&quot;1636e1ba6c0&quot; ut=&quot;1636e1ba6c0&quot; version=&quot;12529018&quot; nativeLibraryPath=&quot;/system/priv-app/GmsCore/lib&quot; primaryCpuAbi=&quot;armeabi-v7a&quot; sharedUserId=&quot;10019&quot; /&gt; push回手机. 手机可以正常启动. 相关节点会重新生成，这说明问题的关键点在/data/system/packages.xml的维护当中。 解决方案1:if (isUpdatedSystemPkg &amp;&amp; !isUpdatedPkgBetter &amp;&amp; ps != null) &#123;//jackywei // Set CPU Abis to application info. if ((scanFlags &amp; SCAN_FIRST_BOOT_OR_UPGRADE) != 0) &#123; final String cpuAbiOverride = deriveAbiOverride(pkg.cpuAbiOverride, updatedPkg); derivePackageAbi(pkg, scanFile, cpuAbiOverride, false, mAppLib32InstallDir); &#125; else &#123; pkg.applicationInfo.primaryCpuAbi = updatedPkg.primaryCpuAbiString; pkg.applicationInfo.secondaryCpuAbi = updatedPkg.secondaryCpuAbiString; &#125; if(ps != null)&#123; throw new PackageManagerException(Log.WARN, &quot;Package &quot; + ps.name + &quot; at &quot; + scanFile + &quot; ignored: updated version &quot; + ps.versionCode + &quot; better than this &quot; + pkg.mVersionCode); &#125; else &#123; throw new PackageManagerException(Log.WARN, &quot;Package &quot; + &quot; at &quot; + scanFile + &quot; ignored: updated version &quot; + &quot; better than this &quot; + pkg.mVersionCode); &#125;&#125; 手机可以正常开机，但是开机之后手机会提示GMS包没有安装，且依赖GMS包的相关应用无法启动。(Fail).而且，/data/system/packages.xml 文件中GMS有关的节点不会更新. 解决方案2:if (isUpdatedSystemPkg &amp;&amp; !isUpdatedPkgBetter &amp;&amp; ps != null) &#123;//jackywei // Set CPU Abis to application info. if ((scanFlags &amp; SCAN_FIRST_BOOT_OR_UPGRADE) != 0) &#123; final String cpuAbiOverride = deriveAbiOverride(pkg.cpuAbiOverride, updatedPkg); derivePackageAbi(pkg, scanFile, cpuAbiOverride, false, mAppLib32InstallDir); &#125; else &#123; pkg.applicationInfo.primaryCpuAbi = updatedPkg.primaryCpuAbiString; pkg.applicationInfo.secondaryCpuAbi = updatedPkg.secondaryCpuAbiString; &#125; throw new PackageManagerException(Log.WARN, &quot;Package &quot; + ps.name + &quot; at &quot; + scanFile + &quot; ignored: updated version &quot; + ps.versionCode + &quot; better than this &quot; + pkg.mVersionCode);&#125; 这样修改之后,PMS会把GMS当成新包解析,并且删除/data/system/packages.xml里面的 &lt;updated-package name=&quot;com.google.android.gms&quot; codePath=&quot;/system/priv-app/GmsCore&quot; ft=&quot;1636e1ba6c0&quot; it=&quot;1636e1ba6c0&quot; ut=&quot;1636e1ba6c0&quot; version=&quot;12529018&quot; nativeLibraryPath=&quot;/system/priv-app/GmsCore/lib&quot; primaryCpuAbi=&quot;armeabi-v7a&quot; sharedUserId=&quot;10019&quot; /&gt; 并且,测试GMS包和相关应用都能正常使用。 目前来看，这样是合理与安全的。 涉及到的代码.两个文件，大概30000行左右的代码. frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.javaframeworks/base/services/core/java/com/android/server/pm/Settings.java 总结1. 和Google play store升级GMS有关系。 2. 原因：可能是某一步处理时，异步操作未正常结束导致packages.xml文件节点里面有未清除的数据，有可能是FOTA程序打断的。 3. 暂时未搞清楚，为什么GMS包会有这样被删除的动作。 (方向有三点: a. PR 157058 有一个修改. b. suyibang 打的Google 的patch可能有问题。 c. Android 8.1自己平台的问题。) 4. 如需继续跟踪. (1. 编译USER版本， 2. 并且需要打开相关LOG， 3. 并且修改LOG工具开机迅速启动 4. 需要google 翻墙WIFI 5. 大量压力测试). 5. 从测试结果来看，第二种方案是安全的。","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"Flash越界","slug":"BUG解析/Flash越界","date":"2018-12-13T07:53:38.381Z","updated":"2018-12-13T07:53:25.245Z","comments":true,"path":"2018/12/13/bug-jie-xi/flash-yue-jie/","link":"","permalink":"https://ifonly.me/2018/12/13/bug-jie-xi/flash-yue-jie/","excerpt":"","text":"现象 [ 120.430581] sps:BAM 0x04044000 (va:0x00000000) enabled: ver:0x25, number of pipes:6 [ 122.454233] attempt to access beyond end of device [ 122.454263] mmcblk0p38: rw=17, want=25695648, limit=25695181 [ 15.461154] ueventd: loading /devices/soc/a21b000.qcom,pronto/firmware/wcnss.b09 took 16ms [ 15.505953] attempt to access beyond end of device [ 15.505985] mmcblk0p38: rw=1, want=25710752, limit=25695181 [ 15.513746] init: Service 'qcom-c_main-sh' (pid 392) exited with statu [ 20.550126] attempt to access beyond end of device [ 20.550152] mmcblk0p38: rw=145, want=25710592, limit=25695181 [ 20.550487] f2fs_msg: 97 callbacks suppressed [ 20.550506] F2FS-fs (mmcblk0p38): Issue discard(3213312, 3213312, 512) failed, ret: -5 分析 可能引起问题的地方: http://10.10.1.18:8080/#/c/8254/1/common/build/partition.xml 排查方法 先恢复出问题手机的出厂设置，看能否开机,再往里面填写数据，看能否复现问题. st=&gt;start: 开始e1=&gt;end: 其他问题e2=&gt;end: 分区问题e3=&gt;end: 其他问题op1=&gt;operation: 恢复出厂设置cond1=&gt;condition: 可以开机？op2=&gt;operation: 写入大量数据cond2=&gt;condition: 能否复现?st-&gt;op1-&gt;cond1-&gt;op2-&gt;cond2cond1(yes)-&gt;op2cond1(no)-&gt;e1cond2(yes)-&gt;e2cond2(no)-&gt;e3 graph TD; A-->B; A-->C; B-->D; C-->D; 分区表对比(1A54恢复出厂设置之前和之后的分区表,没有区别,但是1A53-4和1A54的分区表有比较大的区别,但貌似不影响测试结果) 填充手机的方法: dd if=/dev/zero of=1M.txt bs=1M count=1 dd if=/dev/zero of=100M.txt bs=100M count=1 dd if=/dev/zero of=1000M.txt bs=1000M count=1 for i in $(seq 1 1000); do adb -s 1f0 push 1000M.txt /sdcard/test/1000M$i.txt;done &lt;/font&gt; LOG: 正常的LOG应该是提示: Quota exceeded 不正常的LOG提示: I/O error android@NSGWD180021:/data/workspace/temp/0329/ioerror$ for i in $(seq 1 1000); do adb -s 1f0 push 1000M.txt /sdcard/test/1000M$i.txt;done1000M.txt: 1 file pushed. 8.7 MB/s (1048576000 bytes in 114.662s)1000M.txt: 1 file pushed. 8.4 MB/s (1048576000 bytes in 119.634s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.693s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 121.093s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.021s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.392s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 119.923s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.184s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.583s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.764s)1000M.txt: 1 file pushed. 8.0 MB/s (1048576000 bytes in 124.633s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M12.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 8.6 MB/s (302673832 bytes in 33.740s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M13.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (298021344 bytes in 29.364s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M14.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.2 MB/s (300970104 bytes in 31.357s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M15.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 8.2 MB/s (300445880 bytes in 35.017s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M16.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.8 MB/s (297300536 bytes in 29.071s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M17.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (297890288 bytes in 29.415s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M18.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (297235008 bytes in 29.371s)android@U-NSGWD180020:/data/workspace/log$ for i in $(seq 8 1000); do adb -s 1e4fd635 push 100M.txt /sdcard/test/100M$i.txt;doneadb: error: failed to copy &apos;100M.txt&apos; to &apos;/sdcard/test/100M8.txt&apos;: remote write failed: Quota exceeded100M.txt: 0 files pushed. 13.9 MB/s (99405976 bytes in 6.836s)adb: error: failed to copy &apos;100M.txt&apos; to &apos;/sdcard/test/100M9.txt&apos;: remote write failed: Quota exceeded100M.txt: 0 files pushed. 17.8 MB/s (99799144 bytes in 5.354s)[ 18%] /sdcard/test/100M10.txt^Cerror1000M.txt: 0 files pushed. 245.3 MB/s (2752176 bytes in 0.011s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M153.txt&apos;: remote couldn&apos;t create file: I/O error1000M.txt: 0 files pushed. 247.7 MB/s (2752176 bytes in 0.011s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M154.txt&apos;: remote couldn&apos;t create file: I/O error1000M.txt: 0 files pushed. 184.7 MB/s (2883232 bytes in 0.015s) 问题点android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 439876 1668 438208 1% /tmpfs 452888 688 452200 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/mmcblk0p12 1401624 701420 683820 51% /system/dev/block/mmcblk0p37 247872 146556 96196 61% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 452888 0 452888 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 13356808 12082296 799376 94% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 56896 8592 87% /firmwaretmpfs 452888 0 452888 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 13356808 12082296 799376 94% /storage/emulatedandroid@NSGWD180021:/data/workspace/temp/0329/ioerror$ 恢复出厂设置之后:android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 439876 1668 438208 1% /tmpfs 452888 688 452200 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/mmcblk0p12 1401624 701420 683820 51% /system/dev/block/mmcblk0p37 247872 146556 96196 61% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 452888 0 452888 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845524 377124 12001456 4% /data/dev/block/mmcblk0p14 237536 392 229284 1% /cache/dev/block/mmcblk0p13 28144 232 27260 1% /persist/dev/block/mmcblk0p8 65488 56896 8592 87% /firmwaretmpfs 452888 0 452888 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845524 377124 12001456 4% /storage/emulated 修改方案 修改 BoardConfig.mk 里面 # Modify by weibiao@hipad.comBOARD_USERDATAIMAGE_PARTITION_SIZE := 13155932160 修改后第一开机的df情况 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 382924 11995672 4% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845540 382924 11995672 4% /storage/emulated 修改后第一次开机未重启的,最大填充. 433148 字节未填充满. android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 11945448 433148 97% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845540 11945448 433148 97% /storage/emulated 修改后第一次开机重启之后,最大填充. 与上面的数据有出入 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 11945304 433292 97% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb 恢复出厂设置之后 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845524 381700 11996880 4% /data/dev/block/mmcblk0p14 237536 392 229284 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845524 381700 11996880 4% /storage/emulated","categories":[{"name":"BUG解析","slug":"BUG解析","permalink":"https://ifonly.me/categories/BUG解析/"}],"tags":[]},{"title":"学习资料","slug":"React学习/001-学习网址","date":"2018-12-13T07:40:28.576Z","updated":"2018-12-13T07:40:28.548Z","comments":true,"path":"2018/12/13/react-xue-xi/001-xue-xi-wang-zhi/","link":"","permalink":"https://ifonly.me/2018/12/13/react-xue-xi/001-xue-xi-wang-zhi/","excerpt":"","text":"学习资料https://reactjs.org/tutorial/tutorial.htmlhttps://reactjs.org/tutorial/tutorial.html#setup-for-the-tutorialhttp://huziketang.mangojuice.tophttps://blog.csdn.net/u014541501/article/details/78954526http://www.redux.org.cn/docs/recipes/MigratingToRedux.html https://www.npmjs.com/package/react-native-sockets https://hackernoon.com/a-simple-messaging-app-with-react-native-and-socket-io-e1cae3df7bda https://facebook.github.io/react-native/docs/network https://www.npmjs.com/package/react-native-socketshttps://reactnative.cn/docs/running-on-device/https://reactnative.cn/docs/tutorial/","categories":[{"name":"React学习","slug":"React学习","permalink":"https://ifonly.me/categories/React学习/"}],"tags":[]},{"title":"科学上网","slug":"工作小贴士/科学上网","date":"2018-12-13T06:36:46.232Z","updated":"2018-12-07T01:57:27.026Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/ke-xue-shang-wang/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/ke-xue-shang-wang/","excerpt":"","text":"让终端走代理的几种方法Macproxyterminal（2017.9.17更新） 方法1:在终端中直接运行命令 export http_proxy=”socks5://127.0.0.1:1080”export https_proxy=”socks5://127.0.0.1:1080” 1export http_proxy=http://proxyAddress:port这个办法的好处是简单直接，并且影响面很小（只对当前终端有效，退出就不行了）。 如果你用的是ss代理，在当前终端运行以下命令，那么wget curl 这类网络命令都会经过ss代理 1export ALL_PROXY=socks5://127.0.0.1:1080方法2:把代理服务器地址写入shell配置文件.bashrc或者.zshrc 直接在.bashrc或者.zshrc添加下面内容 12export http_proxy=”http://localhost:port&quot;export https_proxy=”http://localhost:port&quot;以使用shadowsocks代理为例，ss的代理端口为1080,那么应该设置为 12export http_proxy=”socks5://127.0.0.1:1080”export https_proxy=”socks5://127.0.0.1:1080”或者直接设置ALL_PROXY 1export ALL_PROXY=socks5://127.0.0.1:1080localhost就是一个域名，域名默认指向 127.0.0.1，两者是一样的。 然后ESC后:wq保存文件，接着在终端中执行source ~/.bashrc 或者退出当前终端再起一个终端。 这个办法的好处是把代理服务器永久保存了，下次就可以直接用了。 或者通过设置alias简写来简化操作，每次要用的时候输入setproxy，不用了就unsetproxy。 123alias setproxy=”export ALL_PROXY=socks5://127.0.0.1:1080”alias unsetproxy=”unset ALL_PROXY”alias ip=”curl -i http://ip.cn&quot;方法3:改相应工具的配置，比如apt的配置 1sudo vim /etc/apt/apt.conf在文件末尾加入下面这行 1Acquire::http::Proxy “http://proxyAddress:port&quot;保存apt.conf文件即可。关于apt的代理设置可以参考这里 关于git的代理设置看这里:用shadowsocks加速git clone 方法4(推荐):利用proxychains在终端使用socks5代理 补充：如果代理服务器需要登陆，这时可以直接把用户名和密码写进去 1http_proxy=http://userName:password@proxyAddress:port","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"把所有CPU拉到最高","slug":"工作小贴士/拉起所有CPU","date":"2018-12-13T06:36:46.232Z","updated":"2018-12-07T01:58:05.065Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/la-qi-suo-you-cpu/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/la-qi-suo-you-cpu/","excerpt":"","text":"把所有CPU拉到最高adb rootadb shell setenforce 0adb remountadb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu0/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu1/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu2/online&quot;adb shell &quot;echo 1 &gt; /sys/devices/system/cpu/cpu3/online&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor&quot;adb shell &quot;echo performance &gt; /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor&quot;adb shell cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu1/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu2/cpufreq/cpuinfo_cur_freqadb shell cat /sys/devices/system/cpu/cpu3/cpufreq/cpuinfo_cur_freq","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"黑屏分析","slug":"工作小贴士/黑屏分析","date":"2018-12-13T06:36:46.232Z","updated":"2018-12-07T01:57:42.638Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/hei-ping-fen-xi/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/hei-ping-fen-xi/","excerpt":"","text":"黑屏分析首先,分析各进程状态adb shell ps |grep -i surfaceflingeradb shell ps |grep -i system_server 都正常的存在 产生system_server btraces文件adb shell kill -3 913adb pull /data/anr/ trace_00结果正常 产生system_server btraces文件adb shell debuggerd -b 385 |tee surfaceflinger_385_05.logfor i in &#123;1..100&#125;; do adb shell debuggerd -b 385 &gt; surfaceflinger_385_$i.log;sleep 1;done 用对比工具做对比发现调用堆栈,内容基本不变,无论做什么操作.看似正常. 查看binder状态adb pull /sys/kernel/debug/binder/ 下面是感觉不太正常的 pidproc 385context binder node 5612880: u00000000ac61cf40 c00000000ae8963b4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 947 node 12654566: u00000000ac61cf60 c00000000ae896954 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 3098 node 12654595: u00000000ac6241e0 c00000000ac649374 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5612888: u00000000ac624ef0 c00000000ae8965f4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 947 node 12654684: u00000000ac62b010 c00000000ae893b88 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5612913: u00000000ac62b630 c00000000ae896684 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 947 node 5612948: u00000000ac62b640 c00000000ac6490a4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 12654686: u00000000ac62b770 c00000000ae893dbc pri 0:139 hs 1 hw 1 ls 0 lw 0 is 2 iw 2 tr 1 proc 3098 913 node 16754: u00000000ac6a93b0 c00000000ae894dd4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 2 iw 2 tr 1 proc 2231 913 node 16752: u00000000ac6a93e0 c00000000ae894e20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10880475: u00000000ac6a9420 c00000000ae896594 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2226 node 10880481: u00000000ac6a9490 c00000000ae8966b4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2226 node 17259: u00000000ac6a9510 c00000000ac6ab0f0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 17261: u00000000ac6a9910 c00000000ac6ab0a4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 2 iw 2 tr 1 proc 2231 913 node 10880508: u00000000ac6a9980 c00000000ae8967d4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2226 node 10880527: u00000000ac6a99f0 c00000000ac649414 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9914726: u00000000ac6a9a00 c00000000ae8964d4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 1156 node 12654345: u00000000ac6a9a30 c00000000ae8968f4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 3098 node 98067: u00000000ac6a9a60 c00000000ae893110 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2033921: u00000000ac6a9a70 c00000000ae893e80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 98069: u00000000ac6a9e80 c00000000ae89269c pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 27312: u00000000ac6a9ee0 c00000000ae8960e4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 27319: u00000000ac6a9f20 c00000000ae8963e4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 12654351: u00000000ac6a9fe0 c00000000ae896924 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 3098 node 12653178: u00000000ac6bc020 c00000000ae896534 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 3733 node 12653184: u00000000ac6bc030 c00000000ae896624 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 3733 node 9914732: u00000000ac6bc040 c00000000ae896564 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 1156 node 2033923: u00000000ac6bca90 c00000000ae893c7c pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 821: u00000000ac6f6400 c00000000ac67c244 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 253 node 96256: u00000000ac6f6450 c00000000ae8a4034 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2046: u00000000ac6f6950 c00000000ae896144 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2052: u00000000ac6f6960 c00000000ae8961a4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2904: u00000000ac6f6970 c00000000ae8a3ef4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2911: u00000000ac6f6980 c00000000ae8961d4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2917: u00000000ac6f6990 c00000000ae896204 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2923: u00000000ac6f69a0 c00000000ae896234 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 2929: u00000000ac6f69b0 c00000000ae896264 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 4374: u00000000ac6f69c0 c00000000ae896294 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 4380: u00000000ac6f69d0 c00000000ae896174 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8427: u00000000ac6f69e0 c00000000ae8962c4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2231 node 8434: u00000000ac6f69f0 c00000000ae8962f4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2231 node 8679: u00000000ac6f6a20 c00000000ae8a3cc4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 96756: u00000000ac6f6a40 c00000000ae896654 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 99151: u00000000ac6f6ed0 c00000000ae896744 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 99158: u00000000ac6f6f10 c00000000ae8967a4 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 817: u00000000ae88ef90 c00000000ae8b6004 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 8 iw 8 tr 1 proc 3098 3733 2226 1156 947 2231 913 253 node 2058: u00000000ae8c05d0 c00000000ae889188 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8604: u00000000ae8c0c50 c00000000ae896324 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 2231proc 2231context binder node 5414037: u0000000094b52050 c000000009285e9a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5414039: u0000000094b520a0 c000000009285ea60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5413886: u0000000094f6aa20 c00000000928ff400 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5413895: u0000000094f6aab0 c00000000928ff460 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 23830: u0000000095a9d5e0 c0000000095466de0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 16922: u0000000096338120 c000000009631fd20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 17001: u00000000963385d0 c0000000095ea2a28 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 385 node 17169: u0000000096338610 c0000000095ea2a60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 17220: u0000000096338650 c0000000095ea2a80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 17617: u00000000963387e0 c0000000095ea2da0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 17637: u0000000096338810 c0000000095ea2dc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14681: u0000000096b0d020 c0000000096b7eb60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14715: u0000000096b0d030 c0000000096b7eb80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14725: u0000000096b0d060 c0000000096b7eba0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14735: u0000000096b0d070 c0000000096b7ebc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14750: u0000000096b0d090 c0000000096b7ebe0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14762: u0000000096b0d0c0 c0000000096b7ec00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14774: u0000000096b0d0e0 c0000000096b7ec20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14781: u0000000096b0d100 c0000000096b7ec40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14817: u0000000096b0d120 c0000000096b7ec60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14825: u0000000096b0d140 c0000000096b7ec80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14864: u0000000096b0d170 c0000000096b7eca0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14869: u0000000096b0d180 c0000000096b7ecc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14893: u0000000096b0d1a0 c0000000096b7ece0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14908: u0000000096b0d200 c0000000096b7ed00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14938: u0000000096b0d220 c0000000096b7ed40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14927: u0000000096b0d230 c0000000096b7ed20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15056: u0000000096b0d260 c0000000096b7ed80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15059: u0000000096b0d280 c0000000096b7eda0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15095: u0000000096b0d2d0 c0000000096b7edc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15104: u0000000096b0d300 c0000000096b7ede0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15112: u0000000096b0d320 c0000000096b7ee00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15124: u0000000096b0d350 c0000000096b7ee20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15148: u0000000096b0d3d0 c0000000096b7ee40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15163: u0000000096b0d410 c0000000096b7ee60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15182: u0000000096b0d420 c0000000096b7eea0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15174: u0000000096b0d430 c0000000096b7ee80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15298: u0000000096b0d480 c0000000096b7ef00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15251: u0000000096b0d4b0 c0000000096b7eec0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15264: u0000000096b0d570 c0000000096b7eee0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15397: u0000000096b0d650 c0000000096b11280 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15407: u0000000096b0d680 c0000000096b112a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15414: u0000000096b0d6a0 c0000000096b112c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15445: u0000000096b0d6b0 c0000000096b112e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15488: u0000000096b0d700 c0000000096b11340 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15502: u0000000096b0d720 c0000000096b11360 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15508: u0000000096b0d7b0 c0000000096b113c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15475: u0000000096b0d7d0 c0000000096b11300 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15523: u0000000096b0d7f0 c0000000096b113e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15542: u0000000096b0d820 c0000000096b11400 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15482: u0000000096b0dab0 c0000000096b11320 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15768: u0000000096b0db70 c0000000096b115a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15778: u0000000096b0db80 c0000000096b115c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 15788: u0000000096b0dbb0 c0000000096b115e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 16330: u0000000096b0ddb0 c000000009631fa80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 16625: u0000000096b0dde0 c000000009631faa0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10118: u0000000096bf3380 c0000000096bf7d60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10188: u0000000096bf3410 c0000000096bf7de0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10196: u0000000096bf3430 c0000000096bf7e00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10234: u0000000096bf3450 c0000000096bf7e20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10268: u0000000096bf3490 c0000000096bf7e40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10798: u0000000096bf37a0 c00000000a4ac6ca0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 11297: u0000000096bf3810 c00000000973b8240 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 11299: u0000000096bf3830 c00000000973b8280 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 12241: u0000000096bf3a90 c00000000973b8740 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 412 node 14183: u0000000096bf3d40 c0000000096b7e980 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14224: u0000000096bf3d90 c0000000096b7ea00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14241: u0000000096bf3e10 c0000000096b7ea20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14514: u0000000096bf3e50 c0000000096b7ea60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14550: u0000000096bf3ea0 c0000000096b7ea80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14594: u0000000096bf3f40 c0000000096b7eaa0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14631: u0000000096bf3fb0 c0000000096b7eb00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14644: u0000000096bf3fe0 c0000000096b7eb20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 14658: u0000000096bf3ff0 c0000000096b7eb40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8339: u00000000976ef0a0 c00000000976e5920 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8357: u00000000976ef720 c00000000af4e9500 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8511: u00000000976ef760 c00000000976e5b00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8513: u00000000976ef770 c00000000976e5b20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8365: u00000000976ef780 c00000000976e5940 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 7975: u00000000976ef810 c00000000afc1d5a8 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 411 node 7989: u00000000976ef8a0 c00000000976e59c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9231: u00000000976efa10 c00000000976e5a60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9274: u00000000976efa70 c00000000976e5c80 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8508: u00000000976efc00 c00000000976e59a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8621: u00000000976efd00 c00000000976e5bc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9290: u00000000976efd40 c00000000976e5d40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 8693: u00000000976efde0 c00000000976e5c40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9281: u00000000976efdf0 c00000000976e5ce0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9308: u00000000976efe80 c00000000976e5d60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6538: u00000000a5d69840 c00000000af4e98e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6563: u00000000a5d69860 c00000000af4e9900 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6580: u00000000a5d69880 c00000000af4e9920 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 202529: u00000000a5d69a40 c0000000096b57640 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6770: u00000000a5d69be0 c00000000af4e9ca0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6800: u00000000a5d69c20 c00000000af4e9cc0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6889: u00000000a5d69d20 c00000000af4e9ec0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6932: u00000000a5d69d60 c00000000af4e9f00 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6938: u00000000a5d69d80 c00000000af4e9fe0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6944: u00000000a5d69da0 c00000000a6fc07a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6967: u00000000a5d69dd0 c00000000a6fc08c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 202549: u00000000a5d69e00 c0000000096b57660 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5869: u00000000a6fec3c0 c00000000af4e9240 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5904: u00000000a6fec4f0 c00000000af4e9260 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5916: u00000000a6fec510 c00000000af4e92a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5909: u00000000a6fec550 c00000000af4e9280 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5920: u00000000a6fec570 c00000000af4e92c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5953: u00000000a6fec5c0 c00000000af4e92e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5964: u00000000a6fec5e0 c00000000af4e9300 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5971: u00000000a6fec630 c00000000af4e9320 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5975: u00000000a6fec650 c00000000af4e9340 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5979: u00000000a6fec670 c00000000af4e9360 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5986: u00000000a6fec6e0 c00000000af4e9380 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6040: u00000000a6fec810 c00000000af4e93a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6141: u00000000a6fec8e0 c00000000af4e93c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6147: u00000000a6fec900 c00000000af4e93e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6163: u00000000a6fec920 c00000000af4e9400 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6294: u00000000a6fecb30 c00000000af4e9460 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 6301: u00000000a6fecb80 c00000000af4e9420 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 4929: u00000000af483ef0 c00000000a6ffa2a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9405: u00000000af4ea010 c00000000af4e96c0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 18154: u00000000af4ea0f0 c00000000af4e94a0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9366: u00000000af4ea100 c00000000976e5a40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 18162: u00000000af4ea140 c00000000af4e9620 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9453: u00000000af4ea180 c00000000976e5e20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 18178: u00000000af4ea1c0 c00000000af4e9660 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 10084: u00000000af4ea290 c0000000096bf7d40 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 9540: u00000000af4ea3f0 c00000000976e5d20 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 18446: u00000000af4ea860 c00000000af4ebf58 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 411 node 18927: u00000000af4eac80 c00000000976f4e60 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 202510: u00000000af4ead40 c0000000096b57600 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5015: u00000000af4f30c0 c00000000a6ffa500 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5808: u00000000af4f31d0 c00000000af4e91e0 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 node 5829: u00000000af4f3250 c00000000af4e9220 pri 0:139 hs 1 hw 1 ls 0 lw 0 is 1 iw 1 tr 1 proc 913 buffer 9970: 00000000 size 0:0:0 delivered buffer 5414280: 00000000 size 4:0:0 delivered buffer 12850338: 00000000 size 8:0:0 delivered buffer 12907701: 00000000 size 68:0:0 delivered 关注一开始,没有注意到的systemui其他很多应用由和sysetmui一样的现象,先不做分析 kill system_server 看能否恢复adb shell kill -9 913 (system_server) 观察到黑屏现象,还继续存在.说明问题出在下层. adb shell cat /sys/class/graphics/fb0/msm_fb_panel_info &gt; msm_fb_panel_info_02.logadb shell cat /sys/class/leds/lcd-backlight/brightness 最后发现是QCOM 图形库的问题更新SBA搞定.","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"多次拨打电话并且挂断之后.会在某一次拨号界面会冻住","slug":"工作小贴士/手机挂断不了电话","date":"2018-12-13T06:36:46.232Z","updated":"2018-12-07T01:59:06.781Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/shou-ji-gua-duan-bu-liao-dian-hua/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/shou-ji-gua-duan-bu-liao-dian-hua/","excerpt":"","text":"多次拨打电话并且挂断之后.会在某一次拨号界面会冻住.分析过程出问题的 有很多pending async transaction未返回.binder proc state:proc 3419context hwbinder thread 760: l 00 need_return 0 tr 0 thread 1655: l 00 need_return 0 tr 0 thread 2858: l 00 need_return 0 tr 0 thread 3419: l 00 need_return 0 tr 0 thread 3442: l 00 need_return 0 tr 0 thread 3453: l 00 need_return 0 tr 0 thread 3512: l 02 need_return 0 tr 0 thread 3586: l 00 need_return 0 tr 0 thread 3597: l 00 need_return 0 tr 0 thread 3600: l 00 need_return 0 tr 0 thread 4031: l 00 need_return 0 tr 0 node 123985: u0000000097ea23c0 c0000000097e9d8f0 pri 0:120 hs 0 hw 1 ls 0 lw 0 is 0 iw 1 tr 1 proc 251 node 138919: u0000000097ea2c60 c0000000097e9e750 pri 0:120 hs 0 hw 1 ls 0 lw 0 is 0 iw 1 tr 1 proc 251 node 15269: u00000000a64e9a40 c00000000a6712660 pri 0:120 hs 1 hw 1 ls 8 lw 0 is 1 iw 1 tr 1 proc 431 pending async transaction 149963: e6fb8c80 from 0:0 to 3419:0 code 63 flags 11 pri 0:120 r0 node 15269 size 452:68 data f6a004d4 pending async transaction 150734: c621e200 from 0:0 to 3419:0 code 37 flags 11 pri 0:120 r0 node 15269 size 68:4 data f6a008b8 pending async transaction 162914: e96bc400 from 0:0 to 3419:0 code 7b flags 11 pri 0:120 r0 node 15269 size 92:8 data f6a040e4 pending async transaction 164153: dc771b80 from 0:0 to 3419:0 code 7b flags 11 pri 0:120 r0 node 15269 size 92:8 data f6a04b3c pending async transaction 166022: ce803000 from 0:0 to 3419:0 code 7b flags 11 pri 0:120 r0 node 15269 size 92:8 data f6a05884 pending async transaction 168226: d996c600 from 0:0 to 3419:0 code 7b flags 11 pri 0:120 r0 node 15269 size 92:8 data f6a06afc pending async transaction 168903: dfc07200 from 0:0 to 3419:0 code 7b flags 11 pri 0:120 r0 node 15269 size 92:8 data f6a07610 node 15271: u00000000a64e9a60 c00000000a67126a0 pri 0:120 hs 1 hw 1 ls 55 lw 0 is 1 iw 1 tr 1 proc 431 pending async transaction 148293: eac90a80 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a00418 pending async transaction 154669: d2824780 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a03580 pending async transaction 155165: ce943e00 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a0363c pending async transaction 159800: ec976600 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a038a8 pending async transaction 160862: ce943300 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a039d0 pending async transaction 162027: c6249780 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a03cd4 pending async transaction 162517: ec2b6c80 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a03d90 pending async transaction 162713: d7bae800 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a04028 pending async transaction 162915: c3dfa980 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a041a4 pending async transaction 162997: ec2b6400 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a0443c pending async transaction 163477: cea1c680 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a044f8 pending async transaction 163528: dfc07900 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a045b4 pending async transaction 163529: d086a080 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a04670 pending async transaction 163571: d527dd80 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a04908 pending async transaction 163931: e96bc780 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a049c4 pending async transaction 163968: d0a73900 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a04a80 pending async transaction 164154: dc771680 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a04bfc pending async transaction 164192: d7bae280 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a04e94 pending async transaction 164243: d7bae680 from 0:0 to 3419:0 code a flags 11 pri 0:120 r0 node 15271 size 244:32 data f6a04f50 pending async transaction 164271: d7bae980 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a051e8 pending async transaction 164388: e5a41f80 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a052a4 pending async transaction 164785: e96bc800 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a05360 pending async transaction 164894: dc31c500 from 0:0 to 3419:0 code 9 flags 11 pri 0:120 r0 node 15271 size 76:4 data f6a0541c 另外,会有一个:radio 2973 1612 270 1131000 78576 diagchar_read af10a6a0 S m.android.phone 这样的进程. kill -3 某个2973,程序会继续往下跑具体看附件file 目录下面 改NV值70287 可以规避问题,但未找到根本原因.后续有时间继续跟踪","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"批量替换代码中的字符串","slug":"工作小贴士/批量删除代码中的字符串","date":"2018-12-13T06:36:46.232Z","updated":"2018-12-07T01:58:25.273Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/pi-liang-shan-chu-dai-ma-zhong-de-zi-fu-chuan/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/pi-liang-shan-chu-dai-ma-zhong-de-zi-fu-chuan/","excerpt":"","text":"批量替换代码中的字符串 下面command 的意思是： 找出所有含有xxx.字符串的文件,并且把xxx换成hangrep -r &apos;xxx\\.&apos; . |awk -F&apos;:&apos; &apos;&#123;print $1&#125;&apos; | xargs sed -i &apos;s/xxx\\./han\\./&apos;","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"VTS测试说明","slug":"工作小贴士/VTS测试步骤","date":"2018-12-13T06:36:46.228Z","updated":"2018-12-07T02:00:43.709Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/vts-ce-shi-bu-zou/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/vts-ce-shi-bu-zou/","excerpt":"","text":"VTS测试说明VTS包目录结构 解压包(如果设备是64位的就解压64位,32位就解压32位) unzip android-vts-4632653-v4-arm_64.zipunzip system-aosp_arm_a-4632655.zip 解压完成之后,目录结构如下: 烧入GSI包里面对应的system image 确认手机安全patch的版本: Settings –&gt; Security &amp; location –&gt; Security update 刷对应的 system image: cd GSI/adb reboot bootloaderfastboot flash system system-aosp_arm_a-2018-03-05.imgfastboot erase userdatafastboot reboot 跑VTS: Settings –&gt; Display –&gt; Sleep –&gt; 30 minutes(or never) 打开开发者选项,连接usb 开始跑vts cd android-vts/tools/./vts-tradefedrun vts 单独测试某个模块run vts -m VtsHalDrmV1_0Target 读取设备唯一值adb shell cat /sys/devices/soc/7824900.sdhci/mmc_host/mmc0/mmc0:0001/serialadb shell getprop ro.boot.serialno","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"常用暗码","slug":"工作小贴士/常用暗码","date":"2018-12-13T06:36:46.228Z","updated":"2018-12-07T01:59:29.465Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/chang-yong-an-ma/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/chang-yong-an-ma/","excerpt":"","text":"常用暗码 描述 旧暗码 修过后暗码 来源 状态 MMI_REGULATORY_INFO_DISPLAY *#07# *#07# Android默认，不用修改 Delete, Default not show and no req to show this PRL_VERSION_DISPLAY *#0000# *#0000# Android默认，不用修改 Delete, Default not show and no req to show this MMI_IMEI_DISPLAY *#06# *#06# Android默认，不用修改 Done Phone information ##4636## ##4636## Android默认，不用修改 Done MMI_SAR_DISPLAY *#16# #717# OEM Done PRODUCT_NAME_AND_SOFTWARE_VERSION *#4636# *#6163# OEM Done MMITEST_MODE *#2886# *#9999# OEM Done Open Han logcat ##0574## ##6242## OEM Done GOOGLE_APP_CONFIG_MODE ###666# ###466# OEM Done DIAG_PROTECTOR_MODE ###2324# ###3414# OEM Done Enable/disable auto answer mode *#267934# *#267934# OEM Done MMI_CALLDURATION_COUNT_DISPLAY ###232# ###2155# OEM ongoing ENGINEERING_MODE_CODE ##3646633## ##4267## OEM ongoing","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"ubuntu Mysql 安装","slug":"工作小贴士/ubuntu_Mysql_install","date":"2018-12-13T06:36:46.228Z","updated":"2018-12-07T02:01:13.845Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/ubuntu-mysql-install/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/ubuntu-mysql-install/","excerpt":"","text":"ubuntu Mysql 安装安装命令sudo apt-get install mysql-serversudo apt-get install mysql-clientsudo apt-get install libmysqlclient-devsudo apt-get install mysql-common 安装错误安装过程中未提示输入安装密码,导致不能用root登入，处理方法如下:https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost 删除mysql按顺序执行以下命令sudo apt-get autoremove --purge mysql-server-5.0sudo apt-get remove mysql-serversudo apt-get autoremove mysql-serversudo apt-get remove mysql-common 清理残留数据dpkg -l |grep ^rc|awk &apos;&#123;print $2&#125;&apos; |sudo xargs dpkg -P 参考文档https://stackoverflow.com/questions/39281594/error-1698-28000-access-denied-for-user-rootlocalhost https://www.cnblogs.com/zhuyp1015/p/3561470.html","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Vtiger 安装","slug":"工作小贴士/安装vtiger","date":"2018-12-13T06:36:46.228Z","updated":"2018-12-07T01:59:59.389Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/an-zhuang-vtiger/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/an-zhuang-vtiger/","excerpt":"","text":"Vtiger 安装1. 安装阿里云ECS centos 网页镜像.里面会有php,mysql,apache2等应用,不再需要自己安装. 2. 安装vtiger参考文档:https://www.dailyrazor.com/blog/install-vtiger-crm-on-ubuntu-14.04-vps 3. 修改文件: 修改 /etc/my.cnf sql_mode=ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 重启服务: service mysqld restart 修改/etc/php.ini文件. display_errors = Onmax_execution_time = 600error_reporting = E_WARNING &amp; ~E_NOTICE &amp; ~E_DEPRECATEDlog_errors = Offshort_open_tag = On 4. 新增文件vi /etc/httpd/conf.d/crm.conf &lt;Directory &quot;/var/www/html/crm&quot;&gt; Options Indexes FollowSymLinks AllowOverride All Order deny,allow Allow from all&lt;/Directory&gt; 5. 下载vtigerwget https://superb-dca2.dl.sourceforge.net/project/vtigercrm/vtiger%20CRM%207.1.0/Core%20Product/vtigercrm7.1.0.tar.gz","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"ubuntu trace32 安装","slug":"工作小贴士/trace32","date":"2018-12-13T06:36:46.224Z","updated":"2018-12-07T02:02:11.226Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/trace32/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/trace32/","excerpt":"","text":"#T32: Checking permissions to proceed… #T32: No write permission for “/etc/udev/rules.d”. #T32: Do you want to run this installation part as root? (Yes/No) Yes[sudo] password for android:‘/data/mysoftware/TRACE32_R_2018_02_000096069/files/bin/pc_linux64/udev.conf/kernel_starting_2.6.32/10-lauterbach.rules’ -&gt; ‘/etc/udev/rules.d/10-lauterbach.rules’ #T32: Proceeding...#T32: Creating config files...#################################################################################T32: Installation of TRACE32 finished.## To start TRACE32 you will find 4 example configuration files in the# installation directory:# - config.t32 explaining general config-file syntax.# - config_usb.t32 example to start USB-Debugger configurations# - config_eth.t32 example to start Ethernet-Debugger configurations# (adapt the debugger IP-address inside!)# - config_hostmci.t32 example to start HostMCI configurations# - config_sim.t32 example to start Simulator configurations################################################################################ Example 1: Start TRACE32 with an attached USB-Debugger for ARM 64bit targets: “/home/android/t32/bin/pc_linux64/t32marm64-qt” -c “/home/android/t32/config_usb.t32”Example 2: Start TRACE32 as PowerPC simulator: “/home/android/t32/bin/pc_linux64/t32mppc-qt” -c “/home/android/t32/config_sim.t32”","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"ubuntu Shadowsocks 安装","slug":"工作小贴士/UbuntuInstallshadowsocks","date":"2018-12-13T06:36:46.224Z","updated":"2018-12-07T02:01:30.777Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/ubuntuinstallshadowsocks/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/ubuntuinstallshadowsocks/","excerpt":"","text":"ubuntu 安装:Shadowsockshttps://blog.csdn.net/u012986684/article/details/53446107 18.04 纠错:https://blog.csdn.net/blackfrog_unique/article/details/60320737 graph TD; A-->B; A-->C; B-->D; C-->D;","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"nodejs 安装","slug":"工作小贴士/nodejs安装","date":"2018-12-13T06:36:46.220Z","updated":"2018-12-07T02:03:30.138Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/nodejs-an-zhuang/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/nodejs-an-zhuang/","excerpt":"","text":"nodejs 安装先安装nvm: https://blog.csdn.net/u010064206/article/details/76714208","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"解读Nodejs多核处理模块cluster","slug":"工作小贴士/nodejscluster","date":"2018-12-13T06:36:46.220Z","updated":"2018-12-07T02:03:46.570Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/nodejscluster/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/nodejscluster/","excerpt":"","text":"解读Nodejs多核处理模块clusterhttp://blog.fens.me/nodejs-core-cluster/","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Performance","slug":"工作小贴士/Performance","date":"2018-12-13T06:36:46.220Z","updated":"2018-12-07T02:03:16.198Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/performance/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/performance/","excerpt":"","text":"","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"qcn备份","slug":"工作小贴士/qcn备份","date":"2018-12-13T06:36:46.220Z","updated":"2018-12-07T02:02:59.258Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/qcn-bei-fen/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/qcn-bei-fen/","excerpt":"","text":"qcn备份 连接手机:","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"ubuntu Shadowsocks Error","slug":"工作小贴士/shadowsock","date":"2018-12-13T06:36:46.220Z","updated":"2018-12-07T02:02:27.242Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/shadowsock/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/shadowsock/","excerpt":"","text":"Because the pac file has wrong data ,But there is no notify to show the problem.Fuck.","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Git 下载代理设置","slug":"工作小贴士/Git下载代理设置","date":"2018-12-13T06:36:46.216Z","updated":"2018-12-07T02:05:05.727Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/git-xia-zai-dai-li-she-zhi/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/git-xia-zai-dai-li-she-zhi/","excerpt":"","text":"Git 下载代理设置永久代理git config –global http.proxy ‘socks5://127.0.0.1:1080’git config –global https.proxy ‘socks5://127.0.0.1:1080’ 临时代理export http_proxy=”socks5://127.0.0.1:1080”export https_proxy=”socks5://127.0.0.1:1080” 设置ssgit config –global http.proxy ‘socks5://127.0.0.1:1080’ git config –global https.proxy ‘socks5://127.0.0.1:1080’ 设置代理git config –global https.proxy http://127.0.0.1:1080 git config –global https.proxy https://127.0.0.1:1080 取消代理git config –global –unset http.proxygit config –global –unset https.proxy","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Monkey test command","slug":"工作小贴士/Monkey测试命令行","date":"2018-12-13T06:36:46.216Z","updated":"2018-12-07T02:04:05.130Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/monkey-ce-shi-ming-ling-xing/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/monkey-ce-shi-ming-ling-xing/","excerpt":"","text":"Monkey test commandadb -s 202 shell monkey -s 500 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v 1000000 | tee monkey_03.log adb shell monkey -s 200 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v 200 | tee monkey_03.log adb shell monkey -s 500 --throttle 300 --ignore-crashes --ignore-timeouts --monitor-native-crashes -v 1000000 | tee monkey_03.log adb shell monkey -s 500 --ignore-crashes --throttle 3000 --ignore-timeouts --monitor-native-crashes -v 1000000 | tee monkey_03.log adb shell monkey --ignore-crashes --throttle 100 --ignore-timeouts --monitor-native-crashes -v 1000000 | tee monkey_03.log","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Memory debug","slug":"工作小贴士/memory-debug","date":"2018-12-13T06:36:46.216Z","updated":"2018-12-07T02:04:25.950Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/memory-debug/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/memory-debug/","excerpt":"","text":"static const char* DEBUG_MALLOC_PROPERTY_PROGRAM = “libc.debug.malloc.program”;bionic/libc/bionic/malloc_common.cpp adb shell am dumpheap -n &lt;PID_TO_DUMP&gt; /data/local/tmp/heap.txt adb shell stop &amp;&amp; adb shell setprop libc.debug.malloc.program zygote &amp;&amp; adb shell setprop libc.debug.malloc.options backtrace &amp;&amp; adb shell start pid=adb shell ps -A | grep -i zygote | awk &#39;{print $2}&#39; &amp;&amp; adb shell am dumpheap -n $pid /data/local/tmp/heap.txt bootanimation adb shell stop &amp;&amp; adb shell setprop libc.debug.malloc.program bootanimation &amp;&amp; adb shell setprop libc.debug.malloc.options backtrace &amp;&amp; adb shell start pid=adb shell ps -A | grep -i bootanimation | awk &#39;{print $2}&#39; &amp;&amp; adb shell am dumpheap -n $pid /data/local/tmp/heap.txt adb shell ps -A | grep -i bootanimation | awk ‘{print $2} | xargs adb shell kill -28 bootanimation adb shell stop &amp;&amp; adb shell setprop libc.debug.malloc.program zygote &amp;&amp; adb shell setprop libc.debug.malloc.options backtrace &amp;&amp; adb shell start DEBUG C memoryadb shell stop &amp;&amp; adb shell setprop libc.debug.malloc.program app_process &amp;&amp; adb shell setprop libc.debug.malloc.options backtrace=64 &amp;&amp; adb shell start adb shell am dumpheap -n /data/local/tmp/native_heap.txt adb shell am dumpheap -n 2911 /data/local/tmp/native_heap.txtadb pull /data/local/tmp/native_heap.txt DEBUG完全行不通:https://android.googlesource.com/platform/bionic/+/master/libc/malloc_debug/README.md","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Hello World","slug":"工作小贴士/hello-world","date":"2018-12-13T06:36:46.216Z","updated":"2018-12-06T02:15:27.324Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/hello-world/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Flash 越界","slug":"工作小贴士/Flash越界","date":"2018-12-13T06:36:46.212Z","updated":"2018-12-06T09:51:15.595Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/flash-yue-jie/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/flash-yue-jie/","excerpt":"","text":"现象 [ 120.430581] sps:BAM 0x04044000 (va:0x00000000) enabled: ver:0x25, number of pipes:6 [ 122.454233] attempt to access beyond end of device [ 122.454263] mmcblk0p38: rw=17, want=25695648, limit=25695181 [ 15.461154] ueventd: loading /devices/soc/a21b000.qcom,pronto/firmware/wcnss.b09 took 16ms [ 15.505953] attempt to access beyond end of device [ 15.505985] mmcblk0p38: rw=1, want=25710752, limit=25695181 [ 15.513746] init: Service 'qcom-c_main-sh' (pid 392) exited with statu [ 20.550126] attempt to access beyond end of device [ 20.550152] mmcblk0p38: rw=145, want=25710592, limit=25695181 [ 20.550487] f2fs_msg: 97 callbacks suppressed [ 20.550506] F2FS-fs (mmcblk0p38): Issue discard(3213312, 3213312, 512) failed, ret: -5 分析 可能引起问题的地方: http://10.10.1.18:8080/#/c/8254/1/common/build/partition.xml 排查方法 先恢复出问题手机的出厂设置，看能否开机,再往里面填写数据，看能否复现问题. st=&gt;start: 开始e1=&gt;end: 其他问题e2=&gt;end: 分区问题e3=&gt;end: 其他问题op1=&gt;operation: 恢复出厂设置cond1=&gt;condition: 可以开机？op2=&gt;operation: 写入大量数据cond2=&gt;condition: 能否复现?st-&gt;op1-&gt;cond1-&gt;op2-&gt;cond2cond1(yes)-&gt;op2cond1(no)-&gt;e1cond2(yes)-&gt;e2cond2(no)-&gt;e3 graph TD; A-->B; A-->C; B-->D; C-->D; 分区表对比(1A54恢复出厂设置之前和之后的分区表,没有区别,但是1A53-4和1A54的分区表有比较大的区别,但貌似不影响测试结果) 填充手机的方法: dd if=/dev/zero of=1M.txt bs=1M count=1 dd if=/dev/zero of=100M.txt bs=100M count=1 dd if=/dev/zero of=1000M.txt bs=1000M count=1 for i in $(seq 1 1000); do adb -s 1f0 push 1000M.txt /sdcard/test/1000M$i.txt;done &lt;/font&gt; LOG: 正常的LOG应该是提示: Quota exceeded 不正常的LOG提示: I/O error android@NSGWD180021:/data/workspace/temp/0329/ioerror$ for i in $(seq 1 1000); do adb -s 1f0 push 1000M.txt /sdcard/test/1000M$i.txt;done1000M.txt: 1 file pushed. 8.7 MB/s (1048576000 bytes in 114.662s)1000M.txt: 1 file pushed. 8.4 MB/s (1048576000 bytes in 119.634s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.693s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 121.093s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.021s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.392s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 119.923s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.184s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.583s)1000M.txt: 1 file pushed. 8.3 MB/s (1048576000 bytes in 120.764s)1000M.txt: 1 file pushed. 8.0 MB/s (1048576000 bytes in 124.633s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M12.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 8.6 MB/s (302673832 bytes in 33.740s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M13.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (298021344 bytes in 29.364s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M14.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.2 MB/s (300970104 bytes in 31.357s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M15.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 8.2 MB/s (300445880 bytes in 35.017s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M16.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.8 MB/s (297300536 bytes in 29.071s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M17.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (297890288 bytes in 29.415s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M18.txt&apos;: remote write failed: Quota exceeded1000M.txt: 0 files pushed. 9.7 MB/s (297235008 bytes in 29.371s)android@U-NSGWD180020:/data/workspace/log$ for i in $(seq 8 1000); do adb -s 1e4fd635 push 100M.txt /sdcard/test/100M$i.txt;doneadb: error: failed to copy &apos;100M.txt&apos; to &apos;/sdcard/test/100M8.txt&apos;: remote write failed: Quota exceeded100M.txt: 0 files pushed. 13.9 MB/s (99405976 bytes in 6.836s)adb: error: failed to copy &apos;100M.txt&apos; to &apos;/sdcard/test/100M9.txt&apos;: remote write failed: Quota exceeded100M.txt: 0 files pushed. 17.8 MB/s (99799144 bytes in 5.354s)[ 18%] /sdcard/test/100M10.txt^Cerror1000M.txt: 0 files pushed. 245.3 MB/s (2752176 bytes in 0.011s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M153.txt&apos;: remote couldn&apos;t create file: I/O error1000M.txt: 0 files pushed. 247.7 MB/s (2752176 bytes in 0.011s)adb: error: failed to copy &apos;1000M.txt&apos; to &apos;/sdcard/test/1000M154.txt&apos;: remote couldn&apos;t create file: I/O error1000M.txt: 0 files pushed. 184.7 MB/s (2883232 bytes in 0.015s) 问题点android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 439876 1668 438208 1% /tmpfs 452888 688 452200 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/mmcblk0p12 1401624 701420 683820 51% /system/dev/block/mmcblk0p37 247872 146556 96196 61% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 452888 0 452888 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 13356808 12082296 799376 94% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 56896 8592 87% /firmwaretmpfs 452888 0 452888 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 13356808 12082296 799376 94% /storage/emulatedandroid@NSGWD180021:/data/workspace/temp/0329/ioerror$ 恢复出厂设置之后:android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 439876 1668 438208 1% /tmpfs 452888 688 452200 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/mmcblk0p12 1401624 701420 683820 51% /system/dev/block/mmcblk0p37 247872 146556 96196 61% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 452888 0 452888 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845524 377124 12001456 4% /data/dev/block/mmcblk0p14 237536 392 229284 1% /cache/dev/block/mmcblk0p13 28144 232 27260 1% /persist/dev/block/mmcblk0p8 65488 56896 8592 87% /firmwaretmpfs 452888 0 452888 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845524 377124 12001456 4% /storage/emulated 修改方案 修改 BoardConfig.mk 里面 # Modify by weibiao@hipad.comBOARD_USERDATAIMAGE_PARTITION_SIZE := 13155932160 修改后第一开机的df情况 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 382924 11995672 4% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845540 382924 11995672 4% /storage/emulated 修改后第一次开机未重启的,最大填充. 433148 字节未填充满. android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 11945448 433148 97% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845540 11945448 433148 97% /storage/emulated 修改后第一次开机重启之后,最大填充. 与上面的数据有出入 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845540 11945304 433292 97% /data/dev/block/mmcblk0p14 253920 148 248532 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb 恢复出厂设置之后 android@NSGWD180021:/data/workspace/temp/0329/ioerror$ adb -s 1f0 shell df -aFilesystem 1K-blocks Used Available Use% Mounted onrootfs 440392 1668 438724 1% /tmpfs 453400 688 452712 1% /devdevpts 0 0 0 0% /dev/ptsproc 0 0 0 0% /procsysfs 0 0 0 0% /sysselinuxfs 0 0 0 0% /sys/fs/selinux/dev/block/dm-0 1399728 706292 677052 52% /system/dev/block/dm-1 243892 148496 90360 63% /vendornone 0 0 0 0% /acctdebugfs 0 0 0 0% /sys/kernel/debugtmpfs 453400 0 453400 0% /mntnone 0 0 0 0% /confignone 0 0 0 0% /dev/cpuctl/dev/block/mmcblk0p38 12845524 381700 11996880 4% /data/dev/block/mmcblk0p14 237536 392 229284 1% /cache/dev/block/mmcblk0p13 28144 236 27256 1% /persist/dev/block/mmcblk0p8 65488 57024 8464 88% /firmwaretmpfs 453400 0 453400 0% /storagetracefs 0 0 0 0% /sys/kernel/debug/tracingadb 0 0 0 0% /dev/usb-ffs/adb/data/media 12845524 381700 11996880 4% /storage/emulated","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"GDB调试手机工程","slug":"工作小贴士/gdb调试手册","date":"2018-12-13T06:36:46.212Z","updated":"2018-12-07T02:05:35.059Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/gdb-diao-shi-shou-ce/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/gdb-diao-shi-shou-ce/","excerpt":"","text":"GDB调试手机工程挂载自己编译好的工程 以我自己在10.1.6.32编译的工程为例. sudo mount -t cifs -o username=&quot;android&quot;,password=&quot;mobile#5&quot; //10.1.6.32/android /mnt/10.1.6.32 错误提示: mount: block device //10.1.6.36/android is write-protected, mounting read-onlymount: cannot mount block device //10.1.6.36/android read-only 实际是密码错误: sudo mount -t cifs -o username=&quot;android&quot;,password=&quot;hipad@123&quot; //10.1.6.36/android /mnt/10.1.6.36 sudo mount -t cifs -o username=&quot;android&quot;,password=&quot;hipad@123&quot; //10.1.6.14/android /mnt/10.1.6.14 CIFS文件系统的读写权限 查看用户ID cat /etc/passwd | grep 你的用户名 参考网址:https://blog.csdn.net/qq_21808961/article/details/78532487 普通用户如何拥有挂载的CIFS文件系统的读写权限:https://blog.csdn.net/u012487272/article/details/80530473 可读写挂载方法: sudo mount -t cifs -o username=&quot;android&quot;,password=&quot;hipad@123&quot;,uid=1000,gid=1000 //10.1.6.14/android /mnt/10.1.6.14 TIPS: 参考文档:http://www.vixual.net/blog/archives/228 编译gdbserver(或者直接用ndk里面的)mmm prebuilts/misc/android-arm/gdbserver/ -j8adb push out/target/product/QS5509QL/system/bin/gdbserver system/bin/ Gdbserver attatch 你要测试的程序adb shell gdbserver :5039 --attach 2275 (3474 是你要debug的PROCESS PID) 设置手机端口映射到PCadb forward tcp:5039 tcp:5039 GDB 调试连接 启动GDB android@NSGWD180021:/mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak$prebuilts/gdb/linux-x86/bin/gdb(gdb) set solib-absolute-prefix /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/(gdb) set solib-search-path /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/lib/(gdb) target remote :5039(gdb) b jpeg_start_decompress(gdb) b je_malloc if size &gt; 100000 &amp;&amp; size != 1336(gdb) c 结果 Thread 40 &quot;Measurement Wor&quot; hit Breakpoint 2, je_malloc (size=120000) at external/jemalloc/src/jemalloc.c:16491649 if (likely(!malloc_slow)) &#123;(gdb) bt#0 je_malloc (size=120000) at external/jemalloc/src/jemalloc.c:1649#1 0xa99da590 in sqlite3MemMalloc (nByte=120000) at external/sqlite/dist/sqlite3.c:20840#2 0xa9986d1c in mallocWithAlarm (n=120000, pp=&lt;optimized out&gt;) at external/sqlite/dist/sqlite3.c:24524#3 sqlite3Malloc (n=5153960875200) at external/sqlite/dist/sqlite3.c:24554#4 0xa999007c in setupLookaside (db=0x8b9e6e00, pBuf=0x0, sz=1200, cnt=100) at external/sqlite/dist/sqlite3.c:141298#5 0xa99915f2 in openDatabase (zFilename=&lt;optimized out&gt;, ppDb=&lt;optimized out&gt;, flags=&lt;optimized out&gt;, zVfs=&lt;optimized out&gt;) at external/sqlite/dist/sqlite3.c:143682#6 0xa9f94f3c in android::nativeOpen (env=0x9d6daf80, clazz=&lt;optimized out&gt;, pathStr=&lt;optimized out&gt;, openFlags=268435456, labelStr=&lt;optimized out&gt;, enableTrace=6 &apos;\\006&apos;, enableProfile=0 &apos;\\000&apos;, lookasideSz=0, lookasideCnt=-2024916864) at frameworks/base/core/jni/android_database_SQLiteConnection.cpp:135#7 0x70f9719c in android.database.sqlite.SQLiteConnection.nativeOpen () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#8 0x70f975ba in android.database.sqlite.SQLiteConnection.open () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#9 0x70f974ce in android.database.sqlite.SQLiteConnection.open () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#10 0x70f9bf86 in android.database.sqlite.SQLiteConnectionPool.open () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#11 0x70f9bf12 in android.database.sqlite.SQLiteConnectionPool.open () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#12 0x70fa0c8a in android.database.sqlite.SQLiteDatabase.openInner () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#13 0x70fa0858 in android.database.sqlite.SQLiteDatabase.open () from /mnt/10.1.6.32/black/QS5509QL-black/v1A5Z-black-test_memory_leak/out/target/product/QS5509QL/symbols/system/framework/arm/boot-framework.oat#14 0x70fa0ba6 in android.database.sqlite.SQLiteDatabase.openDatabase () 参考文档:https://wladimir-tm4pda.github.io/porting/debugging_gdb.html","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"binder 信息","slug":"工作小贴士/binder信息","date":"2018-12-13T06:36:46.172Z","updated":"2018-12-13T04:01:58.161Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/binder-xin-xi/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/binder-xin-xi/","excerpt":"","text":"大体信息:/sys/kernel/debug/binder/transactions 每个进程的单个信息:/sys/kernel/debug/binder/proc","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"apache2 下载服务器配置","slug":"工作小贴士/apache2下载服务器配置","date":"2018-12-13T06:36:46.112Z","updated":"2018-12-13T06:34:12.350Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/apache2-xia-zai-fu-wu-qi-pei-zhi/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/apache2-xia-zai-fu-wu-qi-pei-zhi/","excerpt":"","text":"apache2 下载服务器配置 新建配置文件: sudo vi /etc/apache2/sites-available/001-download.conf 内容:&lt;VirtualHost *:3002&gt; ServerName 127.0.0.1 ServerAdmin webmaster@localhost #这两个配置必须一致 DocumentRoot /home/android/weibiao/downloadVersion/download #这两个配置必须一致DocumentRoot 和 Directory &lt;Directory /home/android/weibiao/downloadVersion/download&gt; Options Indexes FollowSymLinks AllowOverride none Require all granted &lt;/Directory&gt; ErrorLog $&#123;APACHE_LOG_DIR&#125;/error_download.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access_download.log combined&lt;/VirtualHost&gt; &lt;VirtualHost *:3002&gt; ServerName 127.0.0.1 ServerAdmin webmaster@localhost DocumentRoot /home/android/weibiao/downloadVersion/download &lt;Directory /home/android/weibiao/downloadVersion/download&gt; Options Indexes FollowSymLinks AllowOverride none Require all granted &lt;/Directory&gt; ErrorLog $&#123;APACHE_LOG_DIR&#125;/error_download.log CustomLog $&#123;APACHE_LOG_DIR&#125;/access_download.log combined&lt;/VirtualHost&gt; 修改 /etc/apache2/ports.conf# If you just change the port or add more ports here, you will likely also# have to change the VirtualHost statement in# /etc/apache2/sites-enabled/000-default.confListen 80#新增的端口Listen 3002&lt;IfModule ssl_module&gt; Listen 443&lt;/IfModule&gt;&lt;IfModule mod_gnutls.c&gt; Listen 443&lt;/IfModule&gt;# vim: syntax=apache ts=4 sw=4 sts=4 sr noet 在/etc/apache2/sites-enabled目录下面创建软链接 sudo ln -s ../sites-available/001-download.conf 001-download.conf 重启服务器: sudo service apache2 restart","categories":[{"name":"杂记","slug":"杂记","permalink":"https://ifonly.me/categories/杂记/"}],"tags":[]},{"title":"Android_Mat_工具使用","slug":"工作小贴士/Android_Mat_工具使用","date":"2018-12-13T06:36:46.092Z","updated":"2018-12-13T04:01:58.137Z","comments":true,"path":"2018/12/13/gong-zuo-xiao-tie-shi/android-mat-gong-ju-shi-yong/","link":"","permalink":"https://ifonly.me/2018/12/13/gong-zuo-xiao-tie-shi/android-mat-gong-ju-shi-yong/","excerpt":"","text":"Android_Mat_工具使用抓取hprofadb shell am dumpheap [pid] /data/local/tmp/[pid].hprofhprof-conv 3725.hprof 3725.mat.hprof adb shell am dumpheap 9384 /data/local/tmp/9384_02.hprof 使用MAT这里需要修改,改为144就可以了.private static final int DUMPSYS_ENTRY_COUNT_LIMIT = 14400; // 12 hours on 3 second poll 查找下面这段LOGfling expand=false aboveThreshold=false thresholdNeeded=false screenOnFromTouch=false 参考文档https://stackoverflow.com/questions/25795458/is-it-possible-to-trigger-an-android-heap-dump-from-the-command-line https://stackoverflow.com/questions/6483714/live-memory-analysis-tool-for-android/6483906#6483906 https://developer.android.com/studio/profile/investigate-ram#hdanalyze","categories":[{"name":"工作小贴士","slug":"工作小贴士","permalink":"https://ifonly.me/categories/工作小贴士/"}],"tags":[]},{"title":"Welcome 彪彪 Wiki Site","slug":"index","date":"2018-12-12T10:00:00.000Z","updated":"2018-12-14T09:04:08.978Z","comments":true,"path":"2018/12/12/index/","link":"","permalink":"https://ifonly.me/2018/12/12/index/","excerpt":"","text":"这是彪彪的个人 Wiki 站点，主要记录一些自己总结的只言片语的零散知识点。 我一直觉得 知识不能碎片化，要结构化，于是希望寻找一种优雅的方式来管理我的知识。","categories":[],"tags":[]}]}